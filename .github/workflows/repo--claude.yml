name: Claude Code
# https://docs.anthropic.com/en/docs/claude-code/github-actions

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: [arc-runner-set]
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch more history for better git operations
          fetch-depth: 0
          # This ensures we have access to all branches and PR refs
          # The Claude action will handle checking out the correct branch
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PR environment
        if: github.event.issue.pull_request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get PR number from the issue
          PR_NUMBER=$(echo "${{ github.event.issue.pull_request.url }}" | grep -oE '[0-9]+$')
          echo "Fetching PR #${PR_NUMBER}"

          # Fetch all PR refs first
          git fetch origin "pull/${PR_NUMBER}/head:refs/remotes/origin/pr/${PR_NUMBER}" || true
          git fetch origin "pull/${PR_NUMBER}/merge:refs/remotes/origin/pr/${PR_NUMBER}-merge" || true

          # Get PR details including fork info
          PR_DATA=$(gh pr view ${PR_NUMBER} --json headRefName,headRepository,headRepositoryOwner,isCrossRepository)
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.headRefName')
          HEAD_REPO_OWNER=$(echo "$PR_DATA" | jq -r '.headRepositoryOwner.login')
          HEAD_REPO_NAME=$(echo "$PR_DATA" | jq -r '.headRepository.name')
          IS_FORK=$(echo "$PR_DATA" | jq -r '.isCrossRepository')

          # If it's from a fork, we need to set up the fork remote
          if [ "$IS_FORK" = "true" ]; then
            echo "PR is from fork: ${HEAD_REPO_OWNER}/${HEAD_REPO_NAME}"
            # Add fork as remote
            git remote add fork "https://github.com/${HEAD_REPO_OWNER}/${HEAD_REPO_NAME}.git" || true
            # Fetch the specific branch from the fork
            git fetch fork "${HEAD_REF}:refs/remotes/fork/${HEAD_REF}" || true
            # Create a local branch that tracks the fork branch
            git branch -f "${HEAD_REF}" "refs/remotes/fork/${HEAD_REF}" || true
          else
            echo "PR is from the same repository"
            # For same-repo PRs, just fetch the branch
            git fetch origin "${HEAD_REF}:${HEAD_REF}" || true
          fi

          # List all branches for debugging
          echo "Available branches:"
          git branch -a

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Verify Node.js installation
        run: |
          echo "Node.js location:"
          which node || echo "Node not found in PATH"

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          CLAUDE_CODE_MAX_OUTPUT_TOKENS: "30000" # any safe value < 32000 to avoid reaching token limit
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Allow Claude to run specific commands
          allowed_tools: |
            mcp__github__create_pull_request
            Bash(pnpm install)
            Bash(pnpm test:*)
            Bash(pnpm fmt:sol)
            Bash(pnpm snapshot:*)
            Bash(pnpm compile:*)
            Bash(pnpm layout:*)
            Bash(cat *)
            Bash(find *)
            Bash(grep *)
            Bash(ls *)
            WebFetch(domain:docs.anthropic.com)

          # Add custom instructions for Claude to customize its behavior for your project
          custom_instructions: |
            For protocol(smart contract) changes always start in the `packages/protocol` directory.
            You MUST run `pnpm install` first.
            You MUST follow the development workflow described in CLAUDE.md.
            You MUST make sure the tests are passing before creating a pull request.
            You MUST open a draft pull request after creating a branch.
            You MUST create a pull request after completing your task.
            You can create pull requests using the `mcp__github__create_pull_request` tool.
