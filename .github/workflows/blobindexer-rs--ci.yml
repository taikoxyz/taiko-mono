name: "Blobindexer CI"

permissions:
  contents: read

on:
  push:
    branches: [main]
    tags:
      - "blobindexer-rs-v*"
    paths:
      - "packages/blobindexer-rs/**"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "packages/blobindexer-rs/**"
      - "!**/*.md"
    branches-ignore:
      - release-please--branches--**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_TOOLCHAIN: stable
  REGISTRY_IMAGE: us-docker.pkg.dev/evmchain/images/blobindexer-rs

jobs:
  lint:
    if: ${{ github.event_name == 'push' || (github.event.pull_request.draft == false && !startsWith(github.head_ref, 'release-please') && !startsWith(github.head_ref, 'dependabot')) }}
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ${{ runner.os }}-blobindexer-rs-${{ hashFiles('packages/blobindexer-rs/Cargo.lock') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: clippy, rustfmt

      - name: Run fmt check
        working-directory: packages/blobindexer-rs
        run: cargo fmt -- --check

      - name: Run clippy
        working-directory: packages/blobindexer-rs
        run: cargo clippy --all-targets -- -D warnings

  test:
    if: ${{ github.event_name == 'push' || (github.event.pull_request.draft == false && !startsWith(github.head_ref, 'release-please')) }}
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ${{ runner.os }}-blobindexer-rs-${{ hashFiles('packages/blobindexer-rs/Cargo.lock') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: clippy, rustfmt

      - name: Run tests
        working-directory: packages/blobindexer-rs
        env:
          DATABASE_URL: mysql://root:password@127.0.0.1:3306/blobindexer
        run: cargo test

  docker:
    name: Build and push docker image
    needs: [lint, test]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}
    strategy:
      matrix:
        include:
          - runner: arc-runner-set
            platform: linux/amd64
          - runner: arc-runner-set-arm64
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Prepare Environment
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - uses: actions/checkout@v5

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: us-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GAR_JSON_KEY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          version: latest

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: packages/blobindexer-rs
          file: packages/blobindexer-rs/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY_IMAGE }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  docker-merge:
    name: Merge docker manifests
    needs: docker
    runs-on: arc-runner-set
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') }}

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          version: latest

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: us-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GAR_JSON_KEY }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
