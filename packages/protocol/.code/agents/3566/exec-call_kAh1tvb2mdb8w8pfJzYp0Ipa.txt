/Users/d/.bash_profile: line 2: /Users/d/.docker/init-bash.sh: No such file or directory
Warning: This is a nightly build of Foundry. It is recommended to use the latest stable version. To mute this warning set `FOUNDRY_DISABLE_NIGHTLY_WARNING` in your environment. 

Compiling 355 files with Solc 0.8.30
Solc 0.8.30 finished in 35.98s
Compiler run successful with warnings:
Warning (2519): This declaration shadows an existing declaration.
   --> contracts/layer2/core/Anchor.sol:362:9:
    |
362 |         ProposalState storage _proposalState,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> contracts/layer2/core/Anchor.sol:123:5:
    |
123 |     ProposalState internal _proposalState;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
   --> contracts/layer2/core/Anchor.sol:391:9:
    |
391 |         BlockState storage _blockState,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> contracts/layer2/core/Anchor.sol:126:5:
    |
126 |     BlockState internal _blockState;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2018): Function state mutability can be restricted to pure
  --> test/layer1/core/inbox/init/InboxOptimized2Init.t.sol:22:5:
   |
22 |     function _decodeEvent(bytes memory data)
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2018): Function state mutability can be restricted to pure
  --> test/layer1/core/inbox/init/InboxOptimized2Init.t.sol:31:5:
   |
31 |     function _expectedTransitionHash(bytes32 genesisHash) internal view override returns (bytes32) {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2018): Function state mutability can be restricted to pure
  --> test/layer1/core/inbox/init/InboxOptimized2Init.t.sol:37:5:
   |
37 |     function _expectedProposalHash(IInbox.Proposal memory proposal)
   |     ^ (Relevant source part starts here and spans across multiple lines).

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/core/inbox/mocks/MockContracts.sol:4:8
  |
4 | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC1155.sol:4:8
  |
4 | import "../common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC1155.sol:5:8
  |
5 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC1155.sol:6:8
  |
6 | import "./IBridgedERC1155.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC1155.sol:7:8
  |
7 | import "./LibBridgedToken.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC1155.sol:8:8
  |
8 | import "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SgxVerifier.sol:4:8
  |
4 | import "./LibPublicInput.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SgxVerifier.sol:5:8
  |
5 | import "@openzeppelin/contracts/access/Ownable2Step.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SgxVerifier.sol:6:8
  |
6 | import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SgxVerifier.sol:7:8
  |
7 | import "src/layer1/automata-attestation/interfaces/IAttestation.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/core/inbox/mocks/MockContracts.sol:5:8
  |
5 | import "src/layer1/core/iface/IProofVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/governance/Controller.sol:4:8
  |
4 | import "src/shared/common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/governance/Controller.sol:5:8
  |
5 | import "src/shared/libs/LibBytes.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/core/inbox/finalize/AbstractFinalize.t.sol:13:8
   |
13 | import "src/layer1/core/impl/Inbox.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SgxVerifier.sol:8:8
  |
8 | import "src/layer1/automata-attestation/lib/QuoteV3Auth/V3Struct.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SgxVerifier.sol:9:8
  |
9 | import "src/layer1/core/iface/IProofVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/verifiers/SgxVerifier.sol:10:8
   |
10 | import "src/shared/libs/LibNames.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/SgxVerifier.sol:36:29
   |
36 |     uint64 public immutable taikoChainId;
   |                             ^^^^^^^^^^^^ help: consider using: `TAIKO_CHAIN_ID`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/SgxVerifier.sol:37:30
   |
37 |     address public immutable automataDcapAttestation;
   |                              ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `AUTOMATA_DCAP_ATTESTATION`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/verifiers/SgxVerifier.sol:60:25
   |
60 |     uint256[47] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibEIP4788.sol:6:8
  |
6 | import "./LibBeaconMerkleUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibEIP4788.sol:7:8
  |
7 | import "@eth-fabric/urc/lib/BLSUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibEIP4788.sol:8:8
  |
8 | import "@solady/src/utils/ext/ithaca/BLS.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/shared/vault/BridgedERC1155.sol:19:30
   |
19 |     address public immutable erc1155Vault;
   |                              ^^^^^^^^^^^^ help: consider using: `ERC1155_VAULT`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/governance/Controller.sol:25:21
   |
25 |     uint256 private __reserved0;
   |                     ^^^^^^^^^^^ help: consider using: `_reserved0`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/governance/Controller.sol:31:21
   |
31 |     address private __reserved1;
   |                     ^^^^^^^^^^^ help: consider using: `_reserved1`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/governance/Controller.sol:32:25
   |
32 |     uint256[48] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:53:31
   |
53 |     address private immutable _codec;
   |                               ^^^^^^ help: consider using: `_CODEC`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:56:31
   |
56 |     IERC20 internal immutable _bondToken;
   |                               ^^^^^^^^^^ help: consider using: `_BOND_TOKEN`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:59:39
   |
59 |     IProofVerifier internal immutable _proofVerifier;
   |                                       ^^^^^^^^^^^^^^ help: consider using: `_PROOF_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:62:41
   |
62 |     IProposerChecker internal immutable _proposerChecker;
   |                                         ^^^^^^^^^^^^^^^^ help: consider using: `_PROPOSER_CHECKER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:65:31
   |
65 |     uint48 internal immutable _provingWindow;
   |                               ^^^^^^^^^^^^^^ help: consider using: `_PROVING_WINDOW`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:68:31
   |
68 |     uint48 internal immutable _extendedProvingWindow;
   |                               ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_EXTENDED_PROVING_WINDOW`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:71:32
   |
71 |     uint256 internal immutable _maxFinalizationCount;
   |                                ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_MAX_FINALIZATION_COUNT`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:74:31
   |
74 |     uint48 internal immutable _finalizationGracePeriod;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_FINALIZATION_GRACE_PERIOD`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:77:32
   |
77 |     uint256 internal immutable _ringBufferSize;
   |                                ^^^^^^^^^^^^^^^ help: consider using: `_RING_BUFFER_SIZE`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:80:30
   |
80 |     uint8 internal immutable _basefeeSharingPctg;
   |                              ^^^^^^^^^^^^^^^^^^^ help: consider using: `_BASEFEE_SHARING_PCTG`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/core/inbox/propose/AbstractPropose.t.sol:17:8
   |
17 | import "src/layer1/core/impl/Inbox.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/governance/TaikoTokenBase.sol:4:8
  |
4 | import "../common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/governance/TaikoTokenBase.sol:5:8
  |
5 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/governance/TaikoTokenBase.sol:6:8
  |
6 | import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/bls/script-test/BLSVerifySignature.sol:5:8
  |
5 | import "script/BaseScript.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/BridgedERC1155.sol:33:25
   |
33 |     uint256[46] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/governance/TaikoTokenBase.sol:13:25
   |
13 |     uint256[50] private __slots_previously_used_by_ERC20SnapshotUpgradeable;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_slotsPreviouslyUsedByErc20SnapshotUpgradeable`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/governance/TaikoTokenBase.sol:20:25
   |
20 |     uint256[50] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:84:32
   |
84 |     uint256 internal immutable _minForcedInclusionCount;
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_MIN_FORCED_INCLUSION_COUNT`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:87:31
   |
87 |     uint16 internal immutable _forcedInclusionDelay;
   |                               ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_FORCED_INCLUSION_DELAY`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:90:31
   |
90 |     uint64 internal immutable _forcedInclusionFeeInGwei;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_FORCED_INCLUSION_FEE_IN_GWEI`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:93:31
   |
93 |     uint16 internal immutable _minCheckpointDelay;
   |                               ^^^^^^^^^^^^^^^^^^^ help: consider using: `_MIN_CHECKPOINT_DELAY`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/LibBridgedToken.sol:4:8
  |
4 | import "@openzeppelin/contracts/utils/Strings.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
   --> contracts/layer1/verifiers/SgxVerifier.sol:158:33
    |
158 |         bytes32 signatureHash = keccak256(abi.encodePacked(publicInputs));
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[mixed-case-function]: function names should use mixedCase
  --> contracts/shared/governance/TaikoTokenBase.sol:27:14
   |
27 |     function CLOCK_MODE() public pure override returns (string memory) {
   |              ^^^^^^^^^^ help: consider using: `clockMode`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/bls/script-test/BLSVerifySignature.sol:6:8
  |
6 | import "src/layer1/preconf/libs/LibBLSSignature.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibPreconfUtils.sol:4:8
  |
4 | import "../iface/ILookaheadStore.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibPreconfUtils.sol:5:8
  |
5 | import "./LibPreconfConstants.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibPreconfUtils.sol:6:8
  |
6 | import "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/bls/script-test/BLSHashToCurveG2.sol:5:8
  |
5 | import "script/BaseScript.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/bls/script-test/BLSHashToCurveG2.sol:6:8
  |
6 | import "src/layer1/preconf/libs/LibBLS12381.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BaseVault.sol:4:8
  |
4 | import "../bridge/IBridge.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BaseVault.sol:5:8
  |
5 | import "../common/EssentialResolverContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BaseVault.sol:7:8
  |
7 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BaseVault.sol:8:8
  |
8 | import "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BaseVault.sol:9:8
  |
9 | import "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibPreconfConstants.sol:4:8
  |
4 | import "src/shared/libs/LibNetwork.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:87:72
   |
87 |             original.transitionRecord.bondInstructions[i].proposalId = uint48(i + 1000);
   |                                                                        ^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint48' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/inbox/propose/AbstractPropose.t.sol:431:36
    |
431 |             fill.last.proposal.id, uint48(ringBufferSize - 1), "Should reach ring buffer capacity"
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/BaseVault.sol:32:25
   |
32 |     uint256[50] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/signal/ISignalService.sol:4:8
  |
4 | import "./ICheckpointStore.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[named-struct-fields]: prefer initializing structs with named fields
   --> contracts/layer1/verifiers/SgxVerifier.sol:190:41
    |
190 |             instances[nextInstanceId] = Instance(_instances[i], validSince);
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using named fields: `Instance({ addr: _instances[i], validSince: validSince })`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#named-struct-fields

note[named-struct-fields]: prefer initializing structs with named fields
   --> contracts/layer1/verifiers/SgxVerifier.sol:208:25
    |
208 |         instances[id] = Instance(newInstance, uint64(block.timestamp));
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using named fields: `Instance({ addr: newInstance, validSince: uint64(block.timestamp) })`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#named-struct-fields

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:89:75
   |
89 |             original.transitionRecord.bondInstructions[i].payer = address(uint160(i * 1000));
   |                                                                           ^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint160' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:90:75
   |
90 |             original.transitionRecord.bondInstructions[i].payee = address(uint160(i * 2000));
   |                                                                           ^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint160' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:155:29
    |
155 |                 proposalId: uint48(_proposalId + i),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:157:32
    |
157 |                 payer: address(uint160(0xaaaa + i * 10)),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/signal/SignalService.sol:4:8
  |
4 | import "../common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/signal/SignalService.sol:5:8
  |
5 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/signal/SignalService.sol:6:8
  |
6 | import "../libs/LibTrieProof.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/signal/SignalService.sol:7:8
  |
7 | import "./ICheckpointStore.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/signal/SignalService.sol:8:8
  |
8 | import "./ISignalService.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/shared/signal/SignalService.sol:33:32
   |
33 |     address internal immutable _authorizedSyncer;
   |                                ^^^^^^^^^^^^^^^^^ help: consider using: `_AUTHORIZED_SYNCER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/shared/signal/SignalService.sol:36:32
   |
36 |     address internal immutable _remoteSignalService;
   |                                ^^^^^^^^^^^^^^^^^^^^ help: consider using: `_REMOTE_SIGNAL_SERVICE`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/script-test/BLSHashToCurveG2.sol:23:20
   |
23 |     bytes internal HASH_TO_G2_DST = "QUUX-V01-CS02-with-LibBLS12381G2_XMD:SHA-256_SSWU_RO_";
   |                    ^^^^^^^^^^^^^^ help: consider using: `hashToG2Dst`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:158:32
    |
158 |                 payee: address(uint160(0xbbbb + i * 10))
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:275:29
    |
275 |                 proposalId: uint48(123 + i),
    |                             ^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:277:32
    |
277 |                 payer: address(uint160(0x1000 + i)),
    |                                ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProvedEventEncoder.fuzz.t.sol:278:32
    |
278 |                 payee: address(uint160(0x2000 + i))
    |                                ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/signal/SignalService.sol:58:25
   |
58 |     uint256[44] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/core/BondManager.sol:20:30
   |
20 |     address public immutable authorized;
   |                              ^^^^^^^^^^ help: consider using: `AUTHORIZED`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/core/BondManager.sol:23:29
   |
23 |     IERC20 public immutable bondToken;
   |                             ^^^^^^^^^ help: consider using: `BOND_TOKEN`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/core/BondManager.sol:26:30
   |
26 |     uint256 public immutable minBond;
   |                              ^^^^^^^ help: consider using: `MIN_BOND`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:6:8
  |
6 | import "../BaseTest.sol";
  |        ^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/core/impl/Inbox.sol:97:30
   |
97 |     uint8 internal immutable _permissionlessInclusionMultiplier;
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_PERMISSIONLESS_INCLUSION_MULTIPLIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
   --> contracts/layer1/core/impl/Inbox.sol:102:31
    |
102 |     uint16 internal immutable _compositeKeyVersion;
    |                               ^^^^^^^^^^^^^^^^^^^^ help: consider using: `_COMPOSITE_KEY_VERSION`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
   --> contracts/layer1/core/impl/Inbox.sol:105:41
    |
105 |     ICheckpointStore internal immutable _checkpointStore;
    |                                         ^^^^^^^^^^^^^^^^ help: consider using: `_CHECKPOINT_STORE`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
   --> contracts/layer1/core/impl/Inbox.sol:135:25
    |
135 |     uint256[37] private __gap;
    |                         ^^^^^ help: consider using: `_gap`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/utils/SigVerifyLib.sol:4:8
  |
4 | import "../interfaces/ISigVerifyLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/utils/SigVerifyLib.sol:5:8
  |
5 | import "./BytesUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/automata-attestation/utils/SigVerifyLib.sol:13:31
   |
13 |     address private immutable __es256Verifier;
   |                               ^^^^^^^^^^^^^^^ help: consider using: `_ES256_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-function]: function names should use mixedCase
  --> contracts/layer1/automata-attestation/utils/SigVerifyLib.sol:19:14
   |
19 |     function verifyES256Signature(
   |              ^^^^^^^^^^^^^^^^^^^^ help: consider using: `verifyEs256Signature`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/core/BondManager.sol:33:29
   |
33 |     uint48 public immutable withdrawalDelay;
   |                             ^^^^^^^^^^^^^^^ help: consider using: `WITHDRAWAL_DELAY`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer2/core/BondManager.sol:38:25
   |
38 |     uint256[49] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibPackUnpack.fuzz.t.sol:719:23
    |
719 |                 flag: uint8(i % 256),
    |                       ^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint8' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibPackUnpack.fuzz.t.sol:720:26
    |
720 |                 counter: uint16(i % 65_536),
    |                          ^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint16' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibPackUnpack.fuzz.t.sol:721:28
    |
721 |                 timestamp: uint32(i % 4_294_967_296)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint32' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetBridge.sol:4:8
  |
4 | import "src/layer1/mainnet/LibFasterReentryLock.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibPackUnpack.fuzz.t.sol:730:37
    |
730 |             assertEq(unpacked.flag, uint8(i % 256));
    |                                     ^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint8' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibPackUnpack.fuzz.t.sol:731:40
    |
731 |             assertEq(unpacked.counter, uint16(i % 65_536));
    |                                        ^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint16' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibPackUnpack.fuzz.t.sol:732:42
    |
732 |             assertEq(unpacked.timestamp, uint32(i % 4_294_967_296));
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint32' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/utils/Asn1Decode.sol:8:8
  |
8 | import "./BytesUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/core/inbox/prove/AbstractProve.t.sol:11:8
   |
11 | import "src/layer1/core/impl/Inbox.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[named-struct-fields]: prefer initializing structs with named fields
   --> contracts/layer1/core/impl/Inbox.sol:227:17
    |
227 |                 DerivationSource(false, LibBlobs.validateBlobReference(input.blobReference));
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using named fields: `DerivationSource({ isForcedInclusion: false, blobSlice: LibBlobs.validateBlobReference(input.blobReference) })`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#named-struct-fields

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/layer1/automata-attestation/utils/Asn1Decode.sol:15:16
   |
15 |         return uint80(self);
   |                ^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint80' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/core/Anchor.sol:99:35
   |
99 |     IBondManager public immutable bondManager;
   |                                   ^^^^^^^^^^^ help: consider using: `BOND_MANAGER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
   --> contracts/shared/signal/SignalService.sol:143:16
    |
143 |         return keccak256(abi.encodePacked("SIGNAL", _chainId, _app, _signal));
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetBridge.sol:5:8
  |
5 | import "src/shared/bridge/Bridge.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/layer1/automata-attestation/utils/Asn1Decode.sol:20:16
   |
20 |         return uint80(self >> 80);
   |                ^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint80' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/layer1/automata-attestation/utils/Asn1Decode.sol:25:16
   |
25 |         return uint80(self >> 160);
   |                ^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint80' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/automata-attestation/utils/Asn1Decode.sol:130:34
    |
130 |             ixFirstContentByte = uint80(ix + 2);
    |                                  ^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint80' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/automata-attestation/utils/Asn1Decode.sol:131:33
    |
131 |             ixLastContentByte = uint80(ixFirstContentByte + length - 1);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint80' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/automata-attestation/utils/Asn1Decode.sol:143:34
    |
143 |             ixFirstContentByte = uint80(ix + 2 + lengthbytesLength);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint80' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/core/inbox/prove/InboxOptimized2Prove.t.sol:8:8
  |
8 | import "src/layer1/core/impl/Inbox.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[named-struct-fields]: prefer initializing structs with named fields
  --> contracts/layer1/mainnet/MainnetBridge.sol:63:16
   |
63 |         return Context(msgHash, from, srcChainId);
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using named fields: `Context({ msgHash: msgHash, from: from, srcChainId: srcChainId })`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#named-struct-fields

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
   --> contracts/layer2/core/Anchor.sol:102:39
    |
102 |     ICheckpointStore public immutable checkpointStore;
    |                                       ^^^^^^^^^^^^^^^ help: consider using: `CHECKPOINT_STORE`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
   --> contracts/layer2/core/Anchor.sol:105:30
    |
105 |     uint256 public immutable livenessBond;
    |                              ^^^^^^^^^^^^ help: consider using: `LIVENESS_BOND`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
   --> contracts/layer2/core/Anchor.sol:108:30
    |
108 |     uint256 public immutable provabilityBond;
    |                              ^^^^^^^^^^^^^^^ help: consider using: `PROVABILITY_BOND`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/core/impl/Inbox.sol:241:36
    |
241 |                 originBlockNumber: uint48(parentBlockNumber),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetERC20Vault.sol:4:8
  |
4 | import "src/layer1/mainnet/LibFasterReentryLock.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetERC20Vault.sol:5:8
  |
5 | import "src/shared/vault/ERC20Vault.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
   --> contracts/layer2/core/Anchor.sol:111:29
    |
111 |     uint64 public immutable shastaForkHeight;
    |                             ^^^^^^^^^^^^^^^^ help: consider using: `SHASTA_FORK_HEIGHT`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
   --> contracts/layer2/core/Anchor.sol:114:29
    |
114 |     uint64 public immutable l1ChainId;
    |                             ^^^^^^^^^ help: consider using: `L1_CHAIN_ID`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
   --> contracts/layer2/core/Anchor.sol:131:25
    |
131 |     uint256[49] private __gap;
    |                         ^^^^^ help: consider using: `_gap`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:7:8
  |
7 | import "src/layer1/preconf/libs/LibBLS12381.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:10:20
   |
10 |     bytes internal hash_to_dst = "QUUX-V01-CS02-with-BLS12381G2_XMD:SHA-256_SSWU_RO_";
   |                    ^^^^^^^^^^^ help: consider using: `hashToDst`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/automata-attestation/utils/Asn1Decode.sol:144:33
    |
144 |             ixLastContentByte = uint80(ixFirstContentByte + length - 1);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint80' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20.sol:4:8
  |
4 | import "../common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20.sol:5:8
  |
5 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/inbox/prove/InboxOptimized1TransitionRecord.t.sol:335:18
    |
335 |         assertEq(bytes26(parent1), bytes26(parent2), "First 26 bytes should match");
    |                  ^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes26' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/inbox/prove/InboxOptimized1TransitionRecord.t.sol:335:36
    |
335 |         assertEq(bytes26(parent1), bytes26(parent2), "First 26 bytes should match");
    |                                    ^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes26' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:14:22
   |
14 |         bytes memory expected_u0 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU0`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:16:22
   |
16 |         bytes memory expected_u0_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU0I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:18:22
   |
18 |         bytes memory expected_u1 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU1`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:20:22
   |
20 |         bytes memory expected_u1_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU1I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/core/impl/Inbox.sol:836:29
    |
836 |             head_ = _head + uint48(_toProcess);
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:205:21
    |
205 |                 id: uint48(i + 1),
    |                     ^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:206:35
    |
206 |                 proposer: address(uint160(0x1000 + i)),
    |                                   ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:207:28
    |
207 |                 timestamp: uint48(1_000_000 + i),
    |                            ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/core/impl/InboxOptimized2.sol:32:25
   |
32 |     uint256[50] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:31:22
   |
31 |         bytes memory expected_u0 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU0`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:33:22
   |
33 |         bytes memory expected_u0_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU0I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:35:22
   |
35 |         bytes memory expected_u1 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU1`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:37:22
   |
37 |         bytes memory expected_u1_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU1I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:49:22
   |
49 |         bytes memory expected_u0 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU0`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:51:22
   |
51 |         bytes memory expected_u0_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU0I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:53:22
   |
53 |         bytes memory expected_u1 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU1`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:55:22
   |
55 |         bytes memory expected_u1_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU1I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:69:22
   |
69 |         bytes memory expected_u0 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU0`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:71:22
   |
71 |         bytes memory expected_u0_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU0I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:73:22
   |
73 |         bytes memory expected_u1 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU1`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:75:22
   |
75 |         bytes memory expected_u1_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU1I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20.sol:6:8
  |
6 | import "./IBridgedERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20.sol:7:8
  |
7 | import "./LibBridgedToken.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20.sol:8:8
  |
8 | import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetERC1155Vault.sol:4:8
  |
4 | import "src/layer1/mainnet/LibFasterReentryLock.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetERC1155Vault.sol:5:8
  |
5 | import "src/shared/vault/ERC1155Vault.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/PEMCertChainLib.sol:4:8
  |
4 | import "../utils/Asn1Decode.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/PEMCertChainLib.sol:5:8
  |
5 | import "../utils/BytesUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/PEMCertChainLib.sol:6:8
  |
6 | import "../utils/X509DateUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/PEMCertChainLib.sol:7:8
  |
7 | import "./interfaces/IPEMCertChainLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/SharedResolver.sol:4:8
  |
4 | import "src/shared/common/ResolverBase.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/SharedResolver.sol:5:8
  |
5 | import "src/shared/libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/SharedResolver.sol:6:8
  |
6 | import "src/shared/libs/LibNetwork.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/core/impl/InboxOptimized1.sol:44:25
   |
44 |     uint256[49] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20.sol:9:8
  |
9 | import "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:89:22
   |
89 |         bytes memory expected_u0 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU0`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:91:22
   |
91 |         bytes memory expected_u0_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU0I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unwrapped-modifier-logic]: wrap modifier logic to reduce code size
   --> contracts/layer2/core/Anchor.sol:151:5
    |
151 | /     modifier onlyValidSenderAndHeight() {
152 | |         require(msg.sender == GOLDEN_TOUCH_ADDRESS, InvalidSender());
153 | |         require(block.number >= shastaForkHeight, InvalidForkHeight());
154 | |         _;
155 | |     }
    | |_____^
    |
help: wrap modifier logic to reduce code size
    |
151 ~     modifier onlyValidSenderAndHeight() {
152 +         _onlyValidSenderAndHeight();
153 +         _;
154 +     }
155 + 
156 +     function _onlyValidSenderAndHeight() internal {
157 +         require(msg.sender == GOLDEN_TOUCH_ADDRESS, InvalidSender());
158 +         require(block.number >= shastaForkHeight, InvalidForkHeight());
159 +     }
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unwrapped-modifier-logic

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:208:49
    |
208 |                 endOfSubmissionWindowTimestamp: uint48(1_000_000 + i + 12),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/PEMCertChainLib.sol:8:8
  |
8 | import "solady/src/utils/LibString.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[pascal-case-struct]: structs should use PascalCase
  --> contracts/layer1/automata-attestation/lib/PEMCertChainLib.sol:34:12
   |
34 |     struct PCKTCBFlags {
   |            ^^^^^^^^^^^ help: consider using: `PcktcbFlags`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/bridge/Bridge.sol:4:8
  |
4 | import "../common/EssentialResolverContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/bridge/Bridge.sol:5:8
  |
5 | import "../libs/LibAddress.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:222:33
    |
222 |                     proposalId: uint48(i + j),
    |                                 ^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:226:36
    |
226 |                     payer: address(uint160(0x2000 + i * 10 + j)),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:227:36
    |
227 |                     payee: address(uint160(0x3000 + i * 10 + j))
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:93:22
   |
93 |         bytes memory expected_u1 =
   |                      ^^^^^^^^^^^ help: consider using: `expectedU1`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSHashToFieldFp2.t.sol:95:22
   |
95 |         bytes memory expected_u1_I =
   |                      ^^^^^^^^^^^^^ help: consider using: `expectedU1I`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/shared/vault/BridgedERC20.sol:23:30
   |
23 |     address public immutable erc20Vault;
   |                              ^^^^^^^^^^ help: consider using: `ERC20_VAULT`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/BridgedERC20.sol:28:18
   |
28 |     uint8 public __srcDecimals;
   |                  ^^^^^^^^^^^^^ help: consider using: `_srcDecimals`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/BridgedERC20.sol:40:25
   |
40 |     uint256[47] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/bls/BLSExpandMsgXmd.t.sol:6:8
  |
6 | import "../BaseTest.sol";
  |        ^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/bls/BLSExpandMsgXmd.t.sol:7:8
  |
7 | import "src/layer1/preconf/libs/LibBLS12381.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/bls/BLSExpandMsgXmd.t.sol:10:20
   |
10 |     bytes internal expand_msg_dst = "QUUX-V01-CS02-with-expander-SHA256-128";
   |                    ^^^^^^^^^^^^^^ help: consider using: `expandMsgDst`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/automata-attestation/lib/PEMCertChainLib.sol:360:26
    |
360 |                 ? uint16(bytes2(svnValueBytes)) / 256
    |                          ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes2' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/automata-attestation/lib/PEMCertChainLib.sol:361:26
    |
361 |                 : uint16(bytes2(svnValueBytes));
    |                          ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes2' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
   --> contracts/layer2/core/Anchor.sol:516:16
    |
516 |         return keccak256(abi.encode(_auth.proposalId, _auth.proposer, _auth.provingFee));
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC1155Vault.sol:4:8
  |
4 | import "../libs/LibAddress.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC1155Vault.sol:5:8
  |
5 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC1155Vault.sol:6:8
  |
6 | import "./BaseNFTVault.sol";
  |        ^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/core/impl/InboxOptimized1.sol:101:37
    |
101 |         bytes26 partialParentHash = bytes26(_parentTransitionHash);
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes26' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/core/impl/InboxOptimized1.sol:157:58
    |
157 |                 && record.partialParentTransitionHash == bytes26(_parentTransitionHash)
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes26' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[pascal-case-struct]: structs should use PascalCase
  --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Struct.sol:33:12
   |
33 |     struct QEAuthData {
   |            ^^^^^^^^^^ help: consider using: `QeAuthData`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[pascal-case-struct]: structs should use PascalCase
  --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Struct.sol:47:12
   |
47 |     struct ECDSAQuoteV3AuthData {
   |            ^^^^^^^^^^^^^^^^^^^^ help: consider using: `EcdsaQuoteV3AuthData`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/fixtures/BeaconProofs.sol:4:8
  |
4 | import "src/layer1/preconf/libs/LibEIP4788.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/TaikoToken.sol:4:8
  |
4 | import "src/shared/governance/TaikoTokenBase.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:372:21
    |
372 |                 id: uint48(96 + i),
    |                     ^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:373:35
    |
373 |                 proposer: address(uint160(0x1000 + i)),
    |                                   ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:374:28
    |
374 |                 timestamp: uint48(1_000_000 + i * 10),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:375:49
    |
375 |                 endOfSubmissionWindowTimestamp: uint48(1_000_000 + i * 10 + 12),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:382:42
    |
382 |             blobStartIndex: 1, numBlobs: uint16(_proposalCount * 2), offset: 512
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint16' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:399:33
    |
399 |                     proposalId: uint48(96 + i),
    |                                 ^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:403:36
    |
403 |                     payer: address(uint160(0xaaaa + bondIndex)),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposeInputDecoder.fuzz.t.sol:404:36
    |
404 |                     payee: address(uint160(0xbbbb + bondIndex))
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer2/mainnet/BridgedTaikoToken.sol:4:8
  |
4 | import "src/shared/governance/TaikoTokenBase.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer2/mainnet/BridgedTaikoToken.sol:5:8
  |
5 | import "src/shared/vault/IBridgedERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/mainnet/BridgedTaikoToken.sol:12:30
   |
12 |     address public immutable erc20Vault;
   |                              ^^^^^^^^^^ help: consider using: `ERC20_VAULT`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetDAOController.sol:4:8
  |
4 | import "./LibFasterReentryLock.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC1155Vault.sol:7:8
  |
7 | import "./IBridgedERC1155.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC1155Vault.sol:8:8
  |
8 | import "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC1155Vault.sol:9:8
  |
9 | import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/ERC1155Vault.sol:19:25
   |
19 |     uint256[50] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/bridge/Bridge.sol:6:8
  |
6 | import "../libs/LibMath.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/bridge/Bridge.sol:7:8
  |
7 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer2/governance/DelegateController.sol:4:8
  |
4 | import "src/shared/bridge/IBridge.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetDAOController.sol:5:8
  |
5 | import "src/shared/governance/Controller.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol:4:8
  |
4 | import "../../lib/PEMCertChainLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer2/governance/DelegateController.sol:5:8
  |
5 | import "src/shared/governance/Controller.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer2/governance/DelegateController.sol:6:8
  |
6 | import "src/shared/libs/LibAddress.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer2/governance/DelegateController.sol:7:8
  |
7 | import "src/shared/libs/LibBytes.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer2/governance/DelegateController.sol:8:8
  |
8 | import "src/shared/libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/governance/DelegateController.sol:17:30
   |
17 |     address public immutable l2Bridge;
   |                              ^^^^^^^^ help: consider using: `L2_BRIDGE`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/governance/DelegateController.sol:18:30
   |
18 |     address public immutable daoController;
   |                              ^^^^^^^^^^^^^ help: consider using: `DAO_CONTROLLER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer2/governance/DelegateController.sol:19:29
   |
19 |     uint64 public immutable l1ChainId;
   |                             ^^^^^^^^^ help: consider using: `L1_CHAIN_ID`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/lookahead-store/LookaheadStore_PostedByOperator.t.sol:4:8
  |
4 | import "./LookaheadStoreBase.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol:5:8
  |
5 | import "../../utils/BytesUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol:6:8
  |
6 | import "./V3Struct.sol";
  |        ^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol:7:8
  |
7 | import "solady/src/utils/Base64.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/bridge/Bridge.sol:8:8
  |
8 | import "../libs/LibNetwork.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/bridge/Bridge.sol:9:8
  |
9 | import "../signal/ISignalService.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/shared/bridge/Bridge.sol:10:8
   |
10 | import "./IBridge.sol";
   |        ^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/shared/bridge/Bridge.sol:11:8
   |
11 | import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-function]: function names should use mixedCase
   --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol:260:14
    |
260 |     function packQEReport(V3Struct.EnclaveReport memory enclaveReport)
    |              ^^^^^^^^^^^^ help: consider using: `packQeReport`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[mixed-case-variable]: mutable variables should use mixedCase
   --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol:263:31
    |
263 |         returns (bytes memory packedQEReport)
    |                               ^^^^^^^^^^^^^^ help: consider using: `packedQeReport`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
   --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol:265:16
    |
265 |         uint16 isvProdIdPackBE = (enclaveReport.isvProdId >> 8) | (enclaveReport.isvProdId << 8);
    |                ^^^^^^^^^^^^^^^ help: consider using: `isvProdIdPackBe`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
   --> contracts/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol:266:16
    |
266 |         uint16 isvSvnPackBE = (enclaveReport.isvSvn >> 8) | (enclaveReport.isvSvn << 8);
    |                ^^^^^^^^^^^^ help: consider using: `isvSvnPackBe`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/shared/bridge/Bridge.sol:59:37
   |
59 |     ISignalService public immutable signalService;
   |                                     ^^^^^^^^^^^^^ help: consider using: `SIGNAL_SERVICE`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/bridge/Bridge.sol:63:20
   |
63 |     uint64 private __reserved1;
   |                    ^^^^^^^^^^^ help: consider using: `_reserved1`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/bridge/Bridge.sol:71:21
   |
71 |     Context private __ctx;
   |                     ^^^^^ help: consider using: `_ctx`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/bridge/Bridge.sol:74:21
   |
74 |     uint256 private __reserved2;
   |                     ^^^^^^^^^^^ help: consider using: `_reserved2`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/bridge/Bridge.sol:77:21
   |
77 |     uint256 private __reserved3;
   |                     ^^^^^^^^^^^ help: consider using: `_reserved3`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/bridge/Bridge.sol:79:25
   |
79 |     uint256[44] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/lookahead-store/LookaheadStoreBase.sol:4:8
  |
4 | import "../mocks/MockURC.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[pascal-case-struct]: structs should use PascalCase
 --> contracts/layer1/automata-attestation/lib/TCBInfoStruct.sol:7:12
  |
7 |     struct TCBInfo {
  |            ^^^^^^^ help: consider using: `TcbInfo`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/lookahead-store/LookaheadStoreBase.sol:5:8
  |
5 | import "@eth-fabric/urc/IRegistry.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/layer1/core/libs/LibProposedEventEncoder.sol:43:33
   |
43 |         ptr = P.packUint16(ptr, uint16(sourcesLength));
   |                                 ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint16' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/layer1/core/libs/LibProposedEventEncoder.sol:52:37
   |
52 |             ptr = P.packUint16(ptr, uint16(blobHashesLength));
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint16' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC20Vault.sol:4:8
  |
4 | import "../libs/LibAddress.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC20Vault.sol:5:8
  |
5 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC20Vault.sol:6:8
  |
6 | import "./BaseVault.sol";
  |        ^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/shared/bridge/Bridge.sol:211:48
    |
211 |                 bytes32(_PLACEHOLDER), address(uint160(_PLACEHOLDER)), uint64(_PLACEHOLDER)
    |                                                ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/shared/bridge/Bridge.sol:211:72
    |
211 |                 bytes32(_PLACEHOLDER), address(uint160(_PLACEHOLDER)), uint64(_PLACEHOLDER)
    |                                                                        ^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint64' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/shared/bridge/Bridge.sol:294:46
    |
294 |                       stats.gasUsedInFeeCalc = uint32(
    |  ______________________________________________^
295 | |                         GAS_OVERHEAD + gasStart + _messageCalldataCost(_message.data.length)
296 | |                             - gasleft()
297 | |                     );
    | |_____________________^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint32' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
   --> contracts/shared/bridge/Bridge.sol:443:16
    |
443 |         return keccak256(abi.encode("TAIKO_MESSAGE", _message));
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/lookahead-store/LookaheadStoreBase.sol:6:8
  |
6 | import "@eth-fabric/urc/ISlasher.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/lookahead-store/LookaheadStoreBase.sol:7:8
  |
7 | import "src/layer1/preconf/impl/LookaheadStore.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/lookahead-store/LookaheadStoreBase.sol:8:8
  |
8 | import "src/layer1/preconf/libs/LibPreconfConstants.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/lookahead-store/LookaheadStoreBase.sol:9:8
  |
9 | import "src/shared/libs/LibNetwork.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/preconf/lookahead-store/LookaheadStoreBase.sol:10:8
   |
10 | import "test/shared/CommonTest.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC20Vault.sol:7:8
  |
7 | import "./IBridgedERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC20Vault.sol:8:8
  |
8 | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC20Vault.sol:9:8
  |
9 | import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/lookahead-store/LookaheadStore_PostedByProtectorOrWhitelistedPreconfer.t.sol:4:8
  |
4 | import "./LookaheadStoreBase.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[pascal-case-struct]: structs should use PascalCase
  --> contracts/layer1/automata-attestation/lib/TCBInfoStruct.sol:13:12
   |
13 |     struct TCBLevelObj {
   |            ^^^^^^^^^^^ help: consider using: `TcbLevelObj`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[pascal-case-struct]: structs should use PascalCase
 --> contracts/layer1/automata-attestation/lib/interfaces/IPEMCertChainLib.sol:7:12
  |
7 |     struct ECSha256Certificate {
  |            ^^^^^^^^^^^^^^^^^^^ help: consider using: `EcSha256Certificate`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[pascal-case-struct]: structs should use PascalCase
  --> contracts/layer1/automata-attestation/lib/interfaces/IPEMCertChainLib.sol:18:12
   |
18 |     struct PCKCertificateField {
   |            ^^^^^^^^^^^^^^^^^^^ help: consider using: `PckCertificateField`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[pascal-case-struct]: structs should use PascalCase
  --> contracts/layer1/automata-attestation/lib/interfaces/IPEMCertChainLib.sol:24:12
   |
24 |     struct PCKTCBInfo {
   |            ^^^^^^^^^^ help: consider using: `PcktcbInfo`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer2/governance/DelegateController.sol:25:25
   |
25 |     uint256[50] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposedEventEncoder.fuzz.t.sol:309:50
    |
309 |         original.derivation.basefeeSharingPctg = uint8(_id % 101);
    |                                                  ^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint8' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/shared/vault/ERC20Vault.sol:10:8
   |
10 | import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/shared/vault/ERC20Vault.sol:11:8
   |
11 | import "@openzeppelin/contracts/utils/Address.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[pascal-case-struct]: structs should use PascalCase
  --> contracts/shared/vault/ERC20Vault.sol:28:12
   |
28 |     struct CanonicalERC20 {
   |            ^^^^^^^^^^^^^^ help: consider using: `CanonicalErc20`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/mainnet/MainnetDAOController.sol:14:25
   |
14 |     bytes32[50] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/mainnet/MainnetDAOController.sol:16:27
   |
16 |     function init(address _taikoDAO) external initializer {
   |                           ^^^^^^^^^ help: consider using: `_taikoDao`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/beacon/BeaconProofsVerification.t.sol:4:8
  |
4 | import "../BaseTest.sol";
  |        ^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/beacon/BeaconProofsVerification.t.sol:5:8
  |
5 | import "../fixtures/BeaconProofs.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/beacon/BeaconProofsVerification.t.sol:6:8
  |
6 | import "src/layer1/preconf/libs/LibBeaconMerkleUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProposedEventEncoder.fuzz.t.sol:321:49
    |
321 |                 blobHashes: blobHashes, offset: uint24(_id % MAX_UINT24), timestamp: _timestamp
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint24' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetERC721Vault.sol:4:8
  |
4 | import "src/layer1/mainnet/LibFasterReentryLock.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetERC721Vault.sol:5:8
  |
5 | import "src/shared/vault/ERC721Vault.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/shared/bridge/Bridge.sol:498:54
    |
498 |         _storeContext(bytes32(_PLACEHOLDER), address(uint160(_PLACEHOLDER)), uint64(_PLACEHOLDER));
    |                                                      ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/shared/bridge/Bridge.sol:498:78
    |
498 |         _storeContext(bytes32(_PLACEHOLDER), address(uint160(_PLACEHOLDER)), uint64(_PLACEHOLDER));
    |                                                                              ^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint64' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[named-struct-fields]: prefer initializing structs with named fields
   --> contracts/shared/bridge/Bridge.sol:517:17
    |
517 |         __ctx = Context(_msgHash, _from, _srcChainId);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using named fields: `Context({ msgHash: _msgHash, from: _from, srcChainId: _srcChainId })`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#named-struct-fields

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/shared/bridge/Bridge.sol:540:28
    |
540 |             numCacheOps_ = uint32(numCacheOps);
    |                            ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint32' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetSharedResolver.sol:4:8
  |
4 | import "src/shared/common/ResolverBase.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetSharedResolver.sol:5:8
  |
5 | import "src/shared/libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/mainnet/MainnetSharedResolver.sol:6:8
  |
6 | import "src/shared/libs/LibNetwork.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:4:8
  |
4 | import "./interfaces/IAttestation.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/governance/TaikoDAOController.t.sol:4:8
  |
4 | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/governance/TaikoDAOController.t.sol:5:8
  |
5 | import "src/layer1/mainnet/MainnetDAOController.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/governance/TaikoDAOController.t.sol:6:8
  |
6 | import "test/shared/CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
 --> contracts/shared/libs/LibNames.sol:7:42
  |
7 |     bytes32 internal constant B_BRIDGE = bytes32("bridge");
  |                                          ^^^^^^^^^^^^^^^^^
  |
  = note: consider disabling this lint if you're certain the cast is safe
          
          // casting to 'bytes32' is safe because [explain why]
          // forge-lint: disable-next-line(unsafe-typecast)
          
          
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
 --> contracts/shared/libs/LibNames.sol:8:51
  |
8 |     bytes32 internal constant B_BRIDGED_ERC1155 = bytes32("bridged_erc1155");
  |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: consider disabling this lint if you're certain the cast is safe
          
          // casting to 'bytes32' is safe because [explain why]
          // forge-lint: disable-next-line(unsafe-typecast)
          
          
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
 --> contracts/shared/libs/LibNames.sol:9:49
  |
9 |     bytes32 internal constant B_BRIDGED_ERC20 = bytes32("bridged_erc20");
  |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: consider disabling this lint if you're certain the cast is safe
          
          // casting to 'bytes32' is safe because [explain why]
          // forge-lint: disable-next-line(unsafe-typecast)
          
          
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/shared/libs/LibNames.sol:10:50
   |
10 |     bytes32 internal constant B_BRIDGED_ERC721 = bytes32("bridged_erc721");
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:111:21
    |
111 |                 id: uint48(i + 1),
    |                     ^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:112:35
    |
112 |                 proposer: address(uint160(0x1000 + i)),
    |                                   ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:113:28
    |
113 |                 timestamp: uint48(1_000_000 + i),
    |                            ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:114:49
    |
114 |                 endOfSubmissionWindowTimestamp: uint48(1_000_000 + i + 12),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/DeployCapability.sol:5:8
  |
5 | import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/DeployCapability.sol:6:8
  |
6 | import "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/DeployCapability.sol:8:8
  |
8 | import "forge-std/src/Script.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:264:12
    |
264 |         vm.writeFile("gas-reports/LibProposeInputDecoder.md", report);
    |            ^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/mocks/TestERC20.sol:4:8
  |
4 | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:152:21
    |
152 |                 id: uint48(96 + i),
    |                     ^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:153:35
    |
153 |                 proposer: address(uint160(0x1000 + i)),
    |                                   ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:154:28
    |
154 |                 timestamp: uint48(1_000_000 + i * 10),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:155:49
    |
155 |                 endOfSubmissionWindowTimestamp: uint48(1_000_000 + i * 10 + 12),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:162:42
    |
162 |             blobStartIndex: 1, numBlobs: uint16(_proposalCount * 2), offset: 512
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint16' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:181:33
    |
181 |                     proposalId: uint48(96 + i),
    |                                 ^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/interfaces/IAttestation.sol:4:8
  |
4 | import "../lib/QuoteV3Auth/V3Struct.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> contracts/layer1/core/libs/LibHashSimple.sol:23:16
   |
23 |         return keccak256(abi.encode(_blobHashes));
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> contracts/layer1/core/libs/LibHashSimple.sol:53:16
   |
53 |         return keccak256(abi.encode(_derivation));
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
   --> contracts/layer1/core/libs/LibHashSimple.sol:113:16
    |
113 |         return keccak256(abi.encode(transitionHashes));
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/shared/libs/LibNames.sol:11:49
   |
11 |     bytes32 internal constant B_ERC1155_VAULT = bytes32("erc1155_vault");
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/shared/libs/LibNames.sol:12:47
   |
12 |     bytes32 internal constant B_ERC20_VAULT = bytes32("erc20_vault");
   |                                               ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/shared/libs/LibNames.sol:13:48
   |
13 |     bytes32 internal constant B_ERC721_VAULT = bytes32("erc721_vault");
   |                                                ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/shared/libs/LibNames.sol:14:50
   |
14 |     bytes32 internal constant B_SIGNAL_SERVICE = bytes32("signal_service");
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:185:36
    |
185 |                     payer: address(uint160(0xaaaa + bondIndex)),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:123:34
    |
123 |                     blockNumber: uint48(2_000_000 + i),
    |                                  ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:134:43
    |
134 |                 designatedProver: address(uint160(0x2000 + i)),
    |                                           ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:135:39
    |
135 |                 actualProver: address(uint160(0x3000 + i))
    |                                       ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/devnet/DevnetVerifier.sol:4:8
  |
4 | import "../verifiers/compose/ComposeVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/shared/libs/LibNames.sol:15:41
   |
15 |     bytes32 internal constant B_TAIKO = bytes32("taiko");
   |                                         ^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:315:21
    |
315 |                 id: uint48(100 + i),
    |                     ^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:316:35
    |
316 |                 proposer: address(uint160(0x1000 + i)),
    |                                   ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:317:28
    |
317 |                 timestamp: uint48(1_000_000 + i * 100),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:318:49
    |
318 |                 endOfSubmissionWindowTimestamp: uint48(1_000_000 + i * 100 + 12),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:330:34
    |
330 |                     blockNumber: uint48(2_000_000 + i * 100),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:341:43
    |
341 |                 designatedProver: address(uint160(0x2000 + i)),
    |                                           ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposeInputDecoderGas.t.sol:186:36
    |
186 |                     payee: address(uint160(0xbbbb + bondIndex))
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/libs/LibTrieProof.sol:4:8
  |
4 | import "@optimism/packages/contracts-bedrock/src/libraries/rlp/RLPReader.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/libs/LibTrieProof.sol:5:8
  |
5 | import "@optimism/packages/contracts-bedrock/src/libraries/rlp/RLPWriter.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/libs/LibTrieProof.sol:6:8
  |
6 | import "@optimism/packages/contracts-bedrock/src/libraries/trie/SecureMerkleTrie.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/DeployCapability.sol:9:8
  |
9 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/ERC20Vault.sol:69:25
   |
69 |     uint256[46] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/devnet/OpVerifier.sol:4:8
  |
4 | import "src/layer1/core/iface/IProofVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/libs/LibProveInputDecoder.fuzz.t.sol:342:39
    |
342 |                 actualProver: address(uint160(0x3000 + i))
    |                                       ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/libs/LibAddress.sol:4:8
  |
4 | import "@openzeppelin/contracts/utils/introspection/IERC165.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AutomataDcapV3AttestationTest.t.sol:4:8
  |
4 | import "./AttestationBase.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AutomataDcapV3AttestationTest.t.sol:5:8
  |
5 | import "forge-std/src/StdJson.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AutomataDcapV3AttestationTest.t.sol:6:8
  |
6 | import "forge-std/src/Test.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AutomataDcapV3AttestationTest.t.sol:7:8
  |
7 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
   --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:164:12
    |
164 |         vm.writeFile("gas-reports/LibProposedEventEncoder.md", report);
    |            ^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC721Vault.sol:4:8
  |
4 | import "../libs/LibAddress.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC721Vault.sol:5:8
  |
5 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC721Vault.sol:6:8
  |
6 | import "./BaseNFTVault.sol";
  |        ^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC721Vault.sol:7:8
  |
7 | import "./IBridgedERC721.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC721Vault.sol:8:8
  |
8 | import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/ERC721Vault.sol:9:8
  |
9 | import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/ERC721Vault.sol:19:25
   |
19 |     uint256[50] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:47:34
   |
47 |                 savingsPercent = int256(((abiEncodeGas - libEncoderGas) * 100) / abiEncodeGas);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'int256' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:49:35
   |
49 |                 savingsPercent = -int256(((libEncoderGas - abiEncodeGas) * 100) / abiEncodeGas);
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'int256' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:55:44
   |
55 |                 console2.log("  Savings:", uint256(savingsPercent), "%");
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint256' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:57:46
   |
57 |                 console2.log("  Savings: -", uint256(-savingsPercent), "% (LibEncoder uses more)");
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint256' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:100:34
    |
100 |                 savingsPercent = int256(((abiDecodeGas - libDecodeGas) * 100) / abiDecodeGas);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'int256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:102:35
    |
102 |                 savingsPercent = -int256(((libDecodeGas - abiDecodeGas) * 100) / abiDecodeGas);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'int256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:108:44
    |
108 |                 console2.log("  Savings:", uint256(savingsPercent), "%");
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/common/DefaultResolver.sol:4:8
  |
4 | import "./EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/common/DefaultResolver.sol:5:8
  |
5 | import "./ResolverBase.sol";
  |        ^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/DeployCapability.sol:11:8
   |
11 | import "src/shared/common/DefaultResolver.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProposedEventEncoderGas.t.sol:110:46
    |
110 |                 console2.log("  Savings: -", uint256(-savingsPercent), "% (LibEncoder uses more)");
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
  --> test/layer1/automata-attestation/AutomataDcapV3AttestationTest.t.sol:51:43
   |
51 |         string memory v3QuoteJsonStr = vm.readFile(string.concat(vm.projectRoot(), v3QuoteJsonPath));
   |                                           ^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:4:8
  |
4 | import "../iface/IPreconfWhitelist.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
   --> test/layer1/automata-attestation/AutomataDcapV3AttestationTest.t.sol:187:43
    |
187 |         string memory v3QuoteJsonStr = vm.readFile(string.concat(vm.projectRoot(), v3QuoteJsonPath));
    |                                           ^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/core/libs/LibHashOptimized.sol:216:20
    |
216 |             return bytes26(fullHash);
    |                    ^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes26' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:5:8
  |
5 | import "../libs/LibPreconfConstants.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:6:8
  |
6 | import "../libs/LibPreconfUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/common/DefaultResolver.sol:12:79
   |
12 |     mapping(uint256 chainId => mapping(bytes32 name => address addr)) private __addresses;
   |                                                                               ^^^^^^^^^^^ help: consider using: `_addresses`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/common/DefaultResolver.sol:14:25
   |
14 |     uint256[49] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AttestationBase.sol:4:8
  |
4 | import "forge-std/src/StdJson.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AttestationBase.sol:5:8
  |
5 | import "forge-std/src/Test.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AttestationBase.sol:6:8
  |
6 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:7:8
  |
7 | import "src/layer1/core/iface/IProposerChecker.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:8:8
  |
8 | import "src/shared/common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:9:8
  |
9 | import "src/shared/libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:45:25
   |
45 |     uint256[45] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:5:8
  |
5 | import "./interfaces/ISigVerifyLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:6:8
  |
6 | import "./lib/EnclaveIdStruct.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:7:8
  |
7 | import "./lib/PEMCertChainLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:8:8
  |
8 | import "./lib/QuoteV3Auth/V3Parser.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:9:8
  |
9 | import "./lib/QuoteV3Auth/V3Struct.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:10:8
   |
10 | import "./lib/TCBInfoStruct.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:11:8
   |
11 | import "./lib/interfaces/IPEMCertChainLib.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:12:8
   |
12 | import "./utils/BytesUtils.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:13:8
   |
13 | import "solady/src/utils/Base64.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
   --> test/layer1/core/benchmark/LibProveInputDecoderGas.t.sol:233:12
    |
233 |         vm.writeFile("gas-reports/LibProveInputDecoder.md", report);
    |            ^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> contracts/layer1/verifiers/LibPublicInput.sol:27:16
   |
27 |           return keccak256(
   |  ________________^
28 | |             abi.encode(
29 | |                 "VERIFY_PROOF", _chainId, _verifierContract, _aggregatedProvingHash, _newInstance
30 | |             )
31 | |         );
   | |_________^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/common/ResolverBase.sol:4:8
  |
4 | import "./IResolver.sol";
  |        ^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:14:8
   |
14 | import "solady/src/utils/LibString.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:15:8
   |
15 | import "src/shared/common/EssentialContract.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unwrapped-modifier-logic]: wrap modifier logic to reduce code size
  --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:47:5
   |
47 | /     modifier onlyOwnerOrEjecter() {
48 | |         require(msg.sender == owner() || ejecters[msg.sender], NotOwnerOrEjecter());
49 | |         _;
50 | |     }
   | |_____^
   |
help: wrap modifier logic to reduce code size
   |
47 ~     modifier onlyOwnerOrEjecter() {
48 +         _onlyOwnerOrEjecter();
49 +         _;
50 +     }
51 + 
52 +     function _onlyOwnerOrEjecter() internal {
53 +         require(msg.sender == owner() || ejecters[msg.sender], NotOwnerOrEjecter());
54 +     }
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unwrapped-modifier-logic

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AttestationBase.sol:8:8
  |
8 | import "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/AttestationBase.sol:9:8
  |
9 | import "@optimism/packages/contracts-bedrock/src/libraries/Bytes.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:10:8
   |
10 | import "@p256-verifier/contracts/P256Verifier.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:12:8
   |
12 | import "./helpers/DcapTestUtils.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:13:8
   |
13 | import "./helpers/V3QuoteParseUtils.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:14:8
   |
14 | import "solady/src/utils/Base64.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:15:8
   |
15 | import "src/layer1/automata-attestation/AutomataDcapV3Attestation.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:16:8
   |
16 | import "src/layer1/automata-attestation/lib/PEMCertChainLib.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:17:8
   |
17 | import "src/layer1/automata-attestation/lib/QuoteV3Auth/V3Struct.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:18:8
   |
18 | import "src/layer1/automata-attestation/utils/BytesUtils.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:19:8
   |
19 | import "src/layer1/automata-attestation/utils/SigVerifyLib.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/AttestationBase.sol:20:8
   |
20 | import "src/layer1/verifiers/SgxVerifier.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-const]: constants should use SCREAMING_SNAKE_CASE
  --> test/layer1/automata-attestation/AttestationBase.sol:42:22
   |
42 |     address constant admin = address(1);
   |                      ^^^^^ help: consider using: `ADMIN`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-const

note[screaming-snake-case-const]: constants should use SCREAMING_SNAKE_CASE
  --> test/layer1/automata-attestation/AttestationBase.sol:43:22
   |
43 |     address constant user = 0x0926b716f6aEF52F9F3C3474A2846e1Bf1ACedf6;
   |                      ^^^^ help: consider using: `USER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-const

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
  --> test/layer1/automata-attestation/AttestationBase.sol:80:20
   |
80 |                 vm.readFile(string.concat(vm.projectRoot(), tcbInfoPaths[i]));
   |                    ^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
  --> test/layer1/automata-attestation/AttestationBase.sol:89:42
   |
89 |         string memory enclaveIdJson = vm.readFile(string.concat(vm.projectRoot(), idPath));
   |                                          ^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/common/EssentialContract.sol:4:8
  |
4 | import "./IResolver.sol";
  |        ^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/common/EssentialContract.sol:5:8
  |
5 | import "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/shared/DeployCapability.sol:30:57
   |
30 |                 .registerAddress(uint64(block.chainid), bytes32(bytes(name)), proxy);
   |                                                         ^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProveInputDecoderGas.t.sol:179:21
    |
179 |                 id: uint48(96 + i),
    |                     ^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProveInputDecoderGas.t.sol:180:35
    |
180 |                 proposer: address(uint160(0x1000 + i)),
    |                                   ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProveInputDecoderGas.t.sol:181:28
    |
181 |                 timestamp: uint48(1_000_000 + i * 10),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/common/EssentialContract.sol:6:8
  |
6 | import "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/shared/common/EssentialContract.sol:17:32
   |
17 |     address internal immutable __resolver;
   |                                ^^^^^^^^^^ help: consider using: `_RESOLVER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/common/EssentialContract.sol:23:25
   |
23 |     uint256[50] private __gapFromOldAddressResolver;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_gapFromOldAddressResolver`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BaseNFTVault.sol:4:8
  |
4 | import "./BaseVault.sol";
  |        ^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[pascal-case-struct]: structs should use PascalCase
  --> contracts/shared/vault/BaseNFTVault.sol:15:12
   |
15 |     struct CanonicalNFT {
   |            ^^^^^^^^^^^^ help: consider using: `CanonicalNft`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/shared/DeployCapability.sol:77:62
   |
77 |         DefaultResolver(registerTo).registerAddress(chainId, bytes32(bytes(name)), addr);
   |                                                              ^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/shared/DeployCapability.sol:96:59
   |
96 |             addr: resolver.resolve(uint64(block.chainid), bytes32(bytes(name)), true),
   |                                                           ^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:50:17
   |
50 |     uint256[39] __gap;
   |                 ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/common/EssentialContract.sol:26:20
   |
26 |     uint8 internal __reentry;
   |                    ^^^^^^^^^ help: consider using: `_reentry`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/common/EssentialContract.sol:27:20
   |
27 |     uint8 internal __paused;
   |                    ^^^^^^^^ help: consider using: `_paused`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/common/EssentialContract.sol:29:25
   |
29 |     uint256[49] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/preconf/impl/PreconfWhitelist.sol:213:16
    |
213 |           return uint32(
    |  ________________^
214 | |             LibPreconfUtils.getEpochTimestamp() + _offset * LibPreconfConstants.SECONDS_IN_EPOCH
215 | |         );
    | |_________^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint32' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProveInputDecoderGas.t.sol:182:49
    |
182 |                 endOfSubmissionWindowTimestamp: uint48(1_000_000 + i * 10 + 12),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProveInputDecoderGas.t.sol:194:34
    |
194 |                     blockNumber: uint48(2_000_000 + i * 10),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProveInputDecoderGas.t.sol:204:43
    |
204 |                 designatedProver: address(uint160(0x2000 + i)),
    |                                           ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProveInputDecoderGas.t.sol:205:39
    |
205 |                 actualProver: address(uint160(0x3000 + i))
    |                                       ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/Bridge2_recallMessage.t.sol:4:8
  |
4 | import "./TestBridge2Base.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/compose/ComposeVerifier.sol:4:8
  |
4 | import "src/layer1/core/iface/IProofVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/compose/ComposeVerifier.sol:32:30
   |
32 |     address public immutable sgxGethVerifier;
   |                              ^^^^^^^^^^^^^^^ help: consider using: `SGX_GETH_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/compose/ComposeVerifier.sol:33:30
   |
33 |     address public immutable tdxGethVerifier;
   |                              ^^^^^^^^^^^^^^^ help: consider using: `TDX_GETH_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/compose/ComposeVerifier.sol:35:30
   |
35 |     address public immutable opVerifier;
   |                              ^^^^^^^^^^ help: consider using: `OP_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/compose/ComposeVerifier.sol:37:30
   |
37 |     address public immutable sgxRethVerifier;
   |                              ^^^^^^^^^^^^^^^ help: consider using: `SGX_RETH_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/compose/ComposeVerifier.sol:38:30
   |
38 |     address public immutable risc0RethVerifier;
   |                              ^^^^^^^^^^^^^^^^^ help: consider using: `RISC0_RETH_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-function]: function names should use mixedCase
   --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:195:14
    |
195 |     function _verifyQEReportWithIdentity(V3Struct.EnclaveReport memory quoteEnclaveReport)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_verifyQeReportWithIdentity`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/Bridge2_sendMessage.t.sol:4:8
  |
4 | import "./TestBridge2Base.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/Blacklist.sol:4:8
  |
4 | import "src/layer1/preconf/iface/IBlacklist.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/preconf/impl/Blacklist.sol:21:25
   |
21 |     uint256[48] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unwrapped-modifier-logic]: wrap modifier logic to reduce code size
  --> contracts/layer1/preconf/impl/Blacklist.sol:29:5
   |
29 | /     modifier onlyOverseer() {
30 | |         require(overseers[msg.sender], NotOverseer());
31 | |         _;
32 | |     }
   | |_____^
   |
help: wrap modifier logic to reduce code size
   |
29 ~     modifier onlyOverseer() {
30 +         _onlyOverseer();
31 +         _;
32 +     }
33 + 
34 +     function _onlyOverseer() internal {
35 +         require(overseers[msg.sender], NotOverseer());
36 +     }
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unwrapped-modifier-logic

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:4:8
  |
4 | import "solady/src/utils/JSONParserLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:5:8
  |
5 | import "solady/src/utils/LibString.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:6:8
  |
6 | import "src/layer1/automata-attestation/lib/EnclaveIdStruct.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:7:8
  |
7 | import "src/layer1/automata-attestation/lib/QuoteV3Auth/V3Struct.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
   --> contracts/shared/vault/BaseNFTVault.sol:131:25
    |
131 |     uint256[48] private __gap;
    |                         ^^^^^ help: consider using: `_gap`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
   --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:193:12
    |
193 |         vm.writeFile("gas-reports/LibProvedEventEncoder.md", report);
    |            ^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:49:34
   |
49 |                 savingsPercent = int256(((abiEncodeGas - libEncoderGas) * 100) / abiEncodeGas);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'int256' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:51:35
   |
51 |                 savingsPercent = -int256(((libEncoderGas - abiEncodeGas) * 100) / abiEncodeGas);
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'int256' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:57:44
   |
57 |                 console2.log("  Savings:", uint256(savingsPercent), "%");
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint256' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:59:46
   |
59 |                 console2.log("  Savings: -", uint256(-savingsPercent), "% (LibEncoder uses more)");
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint256' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:103:34
    |
103 |                 savingsPercent = int256(((abiDecodeGas - libDecodeGas) * 100) / abiDecodeGas);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'int256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:105:35
    |
105 |                 savingsPercent = -int256(((libDecodeGas - abiDecodeGas) * 100) / abiDecodeGas);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'int256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:111:44
    |
111 |                 console2.log("  Savings:", uint256(savingsPercent), "%");
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:113:46
    |
113 |                 console2.log("  Savings: -", uint256(-savingsPercent), "% (LibEncoder uses more)");
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:172:29
    |
172 |                 proposalId: uint48(100 + i),
    |                             ^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:174:86
    |
174 |                 payer: address(uint160(0x2222222222222222222222222222222222222222) + uint160(i)),
    |                                                                                      ^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/core/benchmark/LibProvedEventEncoderGas.t.sol:175:86
    |
175 |                 payee: address(uint160(0x3333333333333333333333333333333333333333) + uint160(i))
    |                                                                                      ^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint160' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
   --> contracts/layer1/automata-attestation/AutomataDcapV3Attestation.sol:316:40
    |
316 |             bytes32 issuerPubKeyHash = keccak256(issuer.pubKey);
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[mixed-case-function]: function names should use mixedCase
 --> contracts/layer1/automata-attestation/interfaces/ISigVerifyLib.sol:7:14
  |
7 |     function verifyES256Signature(
  |              ^^^^^^^^^^^^^^^^^^^^ help: consider using: `verifyEs256Signature`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[mixed-case-function]: function names should use mixedCase
   --> contracts/shared/common/EssentialContract.sol:186:14
    |
186 |     function __Essential_init(address _owner) internal virtual onlyInitializing {
    |              ^^^^^^^^^^^^^^^^ help: consider using: `_essentialInit`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadStore.sol:4:8
  |
4 | import "@eth-fabric/urc/IRegistry.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/common/EssentialResolverContract.sol:4:8
  |
4 | import "./EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC721.sol:4:8
  |
4 | import "../common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC721.sol:5:8
  |
5 | import "../libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC721.sol:6:8
  |
6 | import "./IBridgedERC721.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC721.sol:7:8
  |
7 | import "./LibBridgedToken.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:8:8
  |
8 | import "src/layer1/automata-attestation/lib/TCBInfoStruct.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20V2.sol:4:8
  |
4 | import "./BridgedERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20V2.sol:5:8
  |
5 | import "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20V2.sol:6:8
  |
6 | import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20V2.sol:7:8
  |
7 | import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC20V2.sol:8:8
  |
8 | import "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:104:48
    |
104 |                         enclaveId.miscselect = bytes4(hexString);
    |                                                ^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes4' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:109:52
    |
109 |                         enclaveId.miscselectMask = bytes4(hexString);
    |                                                    ^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes4' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/common/EssentialResolverContract.sol:5:8
  |
5 | import "./IResolver.sol";
  |        ^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/helpers/FreeMintERC20Token_With50PctgMintAndTransferFailure.sol:4:8
  |
4 | import "./FreeMintERC20Token.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unwrapped-modifier-logic]: wrap modifier logic to reduce code size
  --> contracts/shared/common/EssentialContract.sol:62:5
   |
62 | /     modifier notImplemented() {
63 | |         revert FUNC_NOT_IMPLEMENTED();
64 | |         _;
65 | |     }
   | |_____^
   |
help: wrap modifier logic to reduce code size
   |
62 ~     modifier notImplemented() {
63 +         _notImplemented();
64 +         _;
65 +     }
66 + 
67 +     function _notImplemented() internal {
68 +         revert FUNC_NOT_IMPLEMENTED();
69 +     }
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unwrapped-modifier-logic

note[unwrapped-modifier-logic]: wrap modifier logic to reduce code size
  --> contracts/shared/common/EssentialContract.sol:68:5
   |
68 | /     modifier nonReentrant() {
69 | |         _checkReentrancy();
70 | |         _storeReentryLock(_TRUE);
71 | |         _;
72 | |         _storeReentryLock(_FALSE);
73 | |     }
   | |_____^
   |
help: wrap modifier logic to reduce code size
   |
68 ~     modifier nonReentrant() {
69 +         _nonReentrant();
70 +         _;
71 +     }
72 + 
73 +     function _nonReentrant() internal {
74 +         _checkReentrancy();
75 +         _storeReentryLock(_TRUE);
76 +     }
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unwrapped-modifier-logic

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/compose/ComposeVerifier.sol:39:30
   |
39 |     address public immutable sp1RethVerifier;
   |                              ^^^^^^^^^^^^^^^ help: consider using: `SP1_RETH_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/compose/SgxAndZkVerifier.sol:4:8
  |
4 | import "./ComposeVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:114:48
    |
114 |                         enclaveId.attributes = bytes16(hexString);
    |                                                ^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes16' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/BridgedERC20V2.sol:26:25
   |
26 |     uint256[49] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> contracts/shared/vault/BridgedERC20V2.sol:90:30
   |
90 |           bytes32 structHash = keccak256(
   |  ______________________________^
91 | |             abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)
92 | |         );
   | |_________^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadStore.sol:5:8
  |
5 | import "@eth-fabric/urc/ISlasher.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadStore.sol:6:8
  |
6 | import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadStore.sol:7:8
  |
7 | import "src/layer1/core/iface/IProposerChecker.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadStore.sol:8:8
  |
8 | import "src/layer1/preconf/iface/ILookaheadStore.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadStore.sol:9:8
  |
9 | import "src/layer1/preconf/iface/IPreconfWhitelist.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:10:8
   |
10 | import "src/layer1/preconf/impl/Blacklist.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:11:8
   |
11 | import "src/layer1/preconf/libs/LibPreconfConstants.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:12:8
   |
12 | import "src/layer1/preconf/libs/LibPreconfUtils.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:119:52
    |
119 |                         enclaveId.attributesMask = bytes16(hexString);
    |                                                    ^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes16' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:124:46
    |
124 |                         enclaveId.mrsigner = bytes32(hexString);
    |                                              ^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes32' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:240:26
    |
240 |         if (bytes1(c) >= bytes1("0") && bytes1(c) <= bytes1("9")) {
    |                          ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:240:54
    |
240 |         if (bytes1(c) >= bytes1("0") && bytes1(c) <= bytes1("9")) {
    |                                                      ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:241:30
    |
241 |             return c - uint8(bytes1("0"));
    |                              ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/helpers/FreeMintERC721Token.sol:4:8
  |
4 | import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/LibAnchorSigner.sol:4:8
  |
4 | import "test/shared/thirdparty/LibUint512Math.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/governance/BridgedTaikoToken.t.sol:4:8
  |
4 | import "../../shared/CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/governance/BridgedTaikoToken.t.sol:5:8
  |
5 | import "src/layer2/mainnet/BridgedTaikoToken.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/governance/BridgedTaikoToken.t.sol:6:8
  |
6 | import "src/shared/common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:4:8
  |
4 | import "solady/src/utils/Base64.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/Bridge2_processMessage.t.sol:4:8
  |
4 | import "./TestBridge2Base.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/compose/AnyTwoVerifier.sol:4:8
  |
4 | import "./ComposeVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/TestBridge2Base.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
 --> test/shared/helpers/FreeMintERC721Token.sol:7:12
  |
7 |     string _baseTokenURI;
  |            ^^^^^^^^^^^^^ help: consider using: `_baseTokenUri`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-function]: function names should use mixedCase
  --> test/shared/helpers/FreeMintERC721Token.sol:14:14
   |
14 |     function _baseURI() internal view virtual override returns (string memory) {
   |              ^^^^^^^^ help: consider using: `_baseUri`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/helpers/EssentialContract_EmptyStub.sol:4:8
  |
4 | import "src/shared/common/EssentialContract.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/TestBridge2Base.sol:5:8
  |
5 | import "test/shared/bridge/helpers/MessageReceiver_SendingHalfEtherBalance.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/shared/vault/BridgedERC721.sol:8:8
  |
8 | import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/shared/vault/BridgedERC721.sol:19:30
   |
19 |     address public immutable erc721Vault;
   |                              ^^^^^^^^^^^ help: consider using: `ERC721_VAULT`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/shared/vault/BridgedERC721.sol:27:25
   |
27 |     uint256[48] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/compose/AnyVerifier.sol:4:8
  |
4 | import "./ComposeVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/Risc0Verifier.sol:4:8
  |
4 | import "./LibPublicInput.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/Risc0Verifier.sol:5:8
  |
5 | import "@openzeppelin/contracts/access/Ownable2Step.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/Risc0Verifier.sol:6:8
  |
6 | import "@risc0/contracts/IRiscZeroVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/Bridge2_retryMessage.t.sol:4:8
  |
4 | import "./TestBridge2Base.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC721Vault.t.sol:4:8
  |
4 | import "../helpers/FreeMintERC721Token.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:5:8
  |
5 | import "solady/src/utils/JSONParserLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:6:8
  |
6 | import "solady/src/utils/LibString.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:7:8
  |
7 | import "src/layer1/automata-attestation/lib/PEMCertChainLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:8:8
  |
8 | import "src/layer1/automata-attestation/lib/QuoteV3Auth/V3Parser.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:9:8
  |
9 | import "src/layer1/automata-attestation/lib/QuoteV3Auth/V3Struct.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:10:8
   |
10 | import "src/layer1/automata-attestation/lib/interfaces/IPEMCertChainLib.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[pascal-case-struct]: structs should use PascalCase
  --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:44:12
   |
44 |     struct QEAuthDataHelper {
   |            ^^^^^^^^^^^^^^^^ help: consider using: `QeAuthDataHelper`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[pascal-case-struct]: structs should use PascalCase
  --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:50:12
   |
50 |     struct QEAuthDataHelperAddress {
   |            ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `QeAuthDataHelperAddress`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[pascal-case-struct]: structs should use PascalCase
  --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:56:12
   |
56 |     struct QEAuthDataHelperBytes {
   |            ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `QeAuthDataHelperBytes`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[pascal-case-struct]: structs should use PascalCase
  --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:67:12
   |
67 |     struct ECDSAQuoteV3AuthDataHelper {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `EcdsaQuoteV3AuthDataHelper`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#pascal-case-struct

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/Risc0Verifier.sol:7:8
  |
7 | import "src/layer1/core/iface/IProofVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/Risc0Verifier.sol:8:8
  |
8 | import "src/shared/libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/Risc0Verifier.sol:17:29
   |
17 |     uint64 public immutable taikoChainId;
   |                             ^^^^^^^^^^^^ help: consider using: `TAIKO_CHAIN_ID`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/Risc0Verifier.sol:18:30
   |
18 |     address public immutable riscoGroth16Verifier;
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider using: `RISCO_GROTH16_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/verifiers/Risc0Verifier.sol:23:25
   |
23 |     uint256[49] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/helpers/RegularERC20.sol:5:8
  |
5 | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC721Vault.t.sol:5:8
  |
5 | import "./ERC721Vault.h.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/Bridge2_failMessage.t.sol:4:8
  |
4 | import "./TestBridge2Base.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:13:8
   |
13 | import "src/shared/common/EssentialContract.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:18:32
   |
18 |     IRegistry public immutable urc;
   |                                ^^^ help: consider using: `URC`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:19:30
   |
19 |     address public immutable lookaheadSlasher;
   |                              ^^^^^^^^^^^^^^^^ help: consider using: `LOOKAHEAD_SLASHER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/BridgedERC20V2.t.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-function]: function names should use mixedCase
   --> test/layer1/automata-attestation/helpers/V3QuoteParseUtils.sol:148:14
    |
148 |     function ParseV3QuoteBytes(
    |              ^^^^^^^^^^^^^^^^^ help: consider using: `parseV3QuoteBytes`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/mocks/MockLookaheadStore.sol:4:8
  |
4 | import "@eth-fabric/urc/ISlasher.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/mocks/MockLookaheadStore.sol:5:8
  |
5 | import "src/layer1/preconf/iface/ILookaheadStore.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:243:26
    |
243 |         if (bytes1(c) >= bytes1("a") && bytes1(c) <= bytes1("f")) {
    |                          ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:243:54
    |
243 |         if (bytes1(c) >= bytes1("a") && bytes1(c) <= bytes1("f")) {
    |                                                      ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:244:35
    |
244 |             return 10 + c - uint8(bytes1("a"));
    |                                   ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:246:26
    |
246 |         if (bytes1(c) >= bytes1("A") && bytes1(c) <= bytes1("F")) {
    |                          ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:246:54
    |
246 |         if (bytes1(c) >= bytes1("A") && bytes1(c) <= bytes1("F")) {
    |                                                      ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC20Vault.t.sol:4:8
  |
4 | import "../helpers/FreeMintERC20Token.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC20Vault.t.sol:5:8
  |
5 | import "./ERC20Vault.h.sol";
  |        ^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/layer1/verifiers/Risc0Verifier.sol:13:59
   |
13 |     bytes32 internal constant RISCZERO_GROTH16_VERIFIER = bytes32("risc0_groth16_verifier");
   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/signal/SignalService.t.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/signal/SignalService.t.sol:5:8
  |
5 | import "src/shared/signal/ICheckpointStore.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/signal/SignalService.t.sol:6:8
  |
6 | import "src/shared/signal/SignalService.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/automata-attestation/helpers/DcapTestUtils.sol:247:35
    |
247 |             return 10 + c - uint8(bytes1("A"));
    |                                   ^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes1' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/Bridge1.t.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/Bridge1.t.sol:5:8
  |
5 | import "test/shared/bridge/helpers/MessageReceiver_SendingHalfEtherBalance.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/governance/DelegateController.t.sol:4:8
  |
4 | import "test/layer2/Layer2Test.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/governance/DelegateController.t.sol:5:8
  |
5 | import "test/shared/helpers/EssentialContract_EmptyStub.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/mocks/MockLookaheadStore.sol:6:8
  |
6 | import "src/layer1/preconf/libs/LibPreconfUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/bridge/Bridge1.t.sol:13:17
   |
13 |         uint256 message_value
   |                 ^^^^^^^^^^^^^ help: consider using: `messageValue`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/shared/signal/SignalService.t.sol:180:30
    |
180 |                 blockNumber: uint48(blockNumber), blockHash: VALID_BLOCK_HASH, stateRoot: stateRoot
    |                              ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:20:30
   |
20 |     address public immutable preconfSlasher;
   |                              ^^^^^^^^^^^^^^ help: consider using: `PRECONF_SLASHER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/vault/ERC20Vault.t.sol:20:26
   |
20 |     BridgedERC20 private tUSDC;
   |                          ^^^^^ help: consider using: `tUsdc`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/vault/ERC20Vault.t.sol:21:26
   |
21 |     BridgedERC20 private tUSDT;
   |                          ^^^^^ help: consider using: `tUsdt`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/vault/ERC20Vault.t.sol:22:26
   |
22 |     BridgedERC20 private tStETH;
   |                          ^^^^^^ help: consider using: `tStEth`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SP1Verifier.sol:4:8
  |
4 | import "./LibPublicInput.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SP1Verifier.sol:5:8
  |
5 | import "@openzeppelin/contracts/access/Ownable2Step.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SP1Verifier.sol:6:8
  |
6 | import "@sp1-contracts/src/ISP1Verifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SP1Verifier.sol:7:8
  |
7 | import "src/layer1/core/iface/IProofVerifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/verifiers/SP1Verifier.sol:8:8
  |
8 | import "src/shared/libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/SP1Verifier.sol:15:29
   |
15 |     uint64 public immutable taikoChainId;
   |                             ^^^^^^^^^^^^ help: consider using: `TAIKO_CHAIN_ID`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/verifiers/SP1Verifier.sol:16:30
   |
16 |     address public immutable sp1RemoteVerifier;
   |                              ^^^^^^^^^^^^^^^^^ help: consider using: `SP1_REMOTE_VERIFIER`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibBlockHeader.sol:4:8
  |
4 | import "@solady/src/utils/LibRLP.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-function]: function names should use mixedCase
   --> test/layer2/governance/DelegateController.t.sol:129:14
    |
129 |     function _deployEssentialContract_EmptyStub(
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `_deployEssentialContractEmptyStub`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:4:8
  |
4 | import "@eth-fabric/urc/lib/MerkleTree.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:5:8
  |
5 | import "src/layer1/preconf/iface/IBlacklist.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/verifiers/SP1Verifier.sol:21:25
   |
21 |     uint256[49] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/mocks/MockURC.sol:4:8
  |
4 | import "@eth-fabric/urc/IRegistry.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> contracts/layer1/verifiers/SP1Verifier.sol:13:53
   |
13 |     bytes32 internal constant SP1_REMOTE_VERIFIER = bytes32("sp1_remote_verifier");
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'bytes32' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:21:30
   |
21 |     address public immutable inbox;
   |                              ^^^^^ help: consider using: `INBOX`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:22:30
   |
22 |     address public immutable preconfWhitelist;
   |                              ^^^^^^^^^^^^^^^^ help: consider using: `PRECONF_WHITELIST`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/preconf/impl/LookaheadStore.sol:28:25
   |
28 |     uint256[49] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/preconf/mocks/MockURC.sol:76:28
   |
76 |             collateralWei: uint80(_collateralWei),
   |                            ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint80' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/preconf/mocks/MockURC.sol:77:22
   |
77 |             numKeys: uint16(_numKeys),
   |                      ^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint16' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/preconf/mocks/MockURC.sol:78:27
   |
78 |             registeredAt: uint48(_registeredAt),
   |                           ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint48' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/preconf/mocks/MockURC.sol:79:29
   |
79 |             unregisteredAt: uint48(_unregisteredAt),
   |                             ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint48' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/preconf/mocks/MockURC.sol:80:24
   |
80 |             slashedAt: uint48(_slashedAt),
   |                        ^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint48' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/preconf/mocks/MockURC.sol:96:24
   |
96 |             optedInAt: uint48(_optedInAt),
   |                        ^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint48' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
  --> test/layer1/preconf/mocks/MockURC.sol:97:25
   |
97 |             optedOutAt: uint48(_optedOutAt),
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = note: consider disabling this lint if you're certain the cast is safe
           
           // casting to 'uint48' is safe because [explain why]
           // forge-lint: disable-next-line(unsafe-typecast)
           
           
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> contracts/layer1/preconf/impl/LookaheadStore.sol:492:40
    |
492 |         lookaheadHash.epochTimestamp = uint48(_epochTimestamp);
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint48' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-function]: function names should use mixedCase
   --> test/shared/bridge/Bridge1.t.sol:358:14
    |
358 |     function retry_message_reverts_when_status_non_retriable() public {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `retryMessageRevertsWhenStatusNonRetriable`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[mixed-case-function]: function names should use mixedCase
  --> contracts/layer1/preconf/libs/LibBlockHeader.sol:30:14
   |
30 |     function encodeRLP(BlockHeader memory _blockHeader) internal pure returns (bytes memory) {
   |              ^^^^^^^^^ help: consider using: `encodeRlp`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/preconf/mocks/MockURC.sol:129:28
    |
129 |                 int256 j = int256(i) - 1;
    |                            ^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'int256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:6:8
  |
6 | import "src/layer1/preconf/iface/ILookaheadSlasher.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:7:8
  |
7 | import "src/layer1/preconf/libs/LibEIP4788.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:8:8
  |
8 | import "src/layer1/preconf/libs/LibPreconfConstants.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-function]: function names should use mixedCase
   --> test/shared/bridge/Bridge1.t.sol:367:14
    |
367 |     function retry_message_reverts_when_last_attempt_and_message_is_not_owner() public {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `retryMessageRevertsWhenLastAttemptAndMessageIsNotOwner`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/helpers/MessageReceiver_SendingHalfEtherBalance.sol:4:8
  |
4 | import "src/shared/bridge/Bridge.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/bridge/helpers/MessageReceiver_SendingHalfEtherBalance.sol:5:8
  |
5 | import "src/shared/signal/SignalService.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> contracts/layer1/preconf/libs/LibBlockHeader.sol:53:16
   |
53 |         return keccak256(encodeRLP(_blockHeader));
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC1155Vault.h.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/shared/SetAddress.s.sol:4:8
  |
4 | import "forge-std/src/Script.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/preconf/mocks/MockURC.sol:131:49
    |
131 |                 while (j >= 0 && timestampArray[uint256(j)] > key) {
    |                                                 ^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/preconf/mocks/MockURC.sol:132:36
    |
132 |                     timestampArray[uint256(j) + 1] = timestampArray[uint256(j)];
    |                                    ^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/preconf/mocks/MockURC.sol:132:69
    |
132 |                     timestampArray[uint256(j) + 1] = timestampArray[uint256(j)];
    |                                                                     ^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/layer1/preconf/mocks/MockURC.sol:135:32
    |
135 |                 timestampArray[uint256(j) + 1] = key;
    |                                ^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint256' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/preconf/libs/LibBLS12381.sol:13:20
   |
13 |         uint256[2] u_I;
   |                    ^^^ help: consider using: `uI`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/preconf/libs/LibBLS12381.sol:23:20
   |
23 |         uint256[2] x_I;
   |                    ^^^ help: consider using: `xI`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/preconf/libs/LibBLS12381.sol:25:20
   |
25 |         uint256[2] y_I;
   |                    ^^^ help: consider using: `yI`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/CommonTest.sol:4:8
  |
4 | import "forge-std/src/Script.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/CommonTest.sol:5:8
  |
5 | import "forge-std/src/Test.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/CommonTest.sol:6:8
  |
6 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/CommonTest.sol:8:8
  |
8 | import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/CommonTest.sol:9:8
  |
9 | import "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:10:8
   |
10 | import "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:11:8
   |
11 | import "@openzeppelin/contracts/utils/Strings.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:12:8
   |
12 | import "@openzeppelin/contracts/utils/math/SafeCast.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:13:8
   |
13 | import "@optimism/packages/contracts-bedrock/src/EAS/Common.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:15:8
   |
15 | import "src/layer1/mainnet/TaikoToken.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:16:8
   |
16 | import "src/shared/bridge/Bridge.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:17:8
   |
17 | import "src/shared/common/DefaultResolver.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:18:8
   |
18 | import "src/shared/vault/BridgedERC1155.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/whitelist/PreconfWhitelist.t.sol:4:8
  |
4 | import "../mocks/MockBeaconBlockRoot.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/mainnet/DeployTaikoDAOController.s.sol:4:8
  |
4 | import "script/BaseScript.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/mainnet/DeployTaikoDAOController.s.sol:5:8
  |
5 | import "src/layer1/mainnet/MainnetDAOController.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:19:8
   |
19 | import "src/shared/vault/BridgedERC20V2.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:20:8
   |
20 | import "src/shared/vault/BridgedERC721.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:21:8
   |
21 | import "src/shared/vault/ERC1155Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:22:8
   |
22 | import "src/shared/vault/ERC20Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/Layer2Test.sol:4:8
  |
4 | import "src/layer2/core/Anchor.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/Layer2Test.sol:5:8
  |
5 | import "src/layer2/governance/DelegateController.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/Layer2Test.sol:6:8
  |
6 | import "test/layer2/LibAnchorSigner.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer2/Layer2Test.sol:7:8
  |
7 | import "test/shared/CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:9:8
  |
9 | import "src/layer1/preconf/libs/LibPreconfUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:10:8
   |
10 | import "src/shared/common/EssentialContract.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:15:30
   |
15 |     address public immutable urc;
   |                              ^^^ help: consider using: `URC`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:16:30
   |
16 |     address public immutable lookaheadStore;
   |                              ^^^^^^^^^^^^^^ help: consider using: `LOOKAHEAD_STORE`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
  --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:17:30
   |
17 |     uint256 public immutable slashAmount;
   |                              ^^^^^^^^^^^ help: consider using: `SLASH_AMOUNT`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> contracts/layer1/preconf/impl/LookaheadSlasher.sol:19:25
   |
19 |     uint256[50] private __gap;
   |                         ^^^^^ help: consider using: `_gap`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC1155Vault.h.sol:5:8
  |
5 | import "../helpers/CanSayHelloWorld.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC1155Vault.h.sol:6:8
  |
6 | import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-function]: function names should use mixedCase
  --> test/shared/vault/ERC1155Vault.h.sol:55:14
   |
55 |     function sendReceiveERC1155ToERC1155Vault(
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `sendReceiveErc1155ToErc1155Vault`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/iface/ILookaheadSlasher.sol:4:8
  |
4 | import "@eth-fabric/urc/IRegistry.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/iface/ILookaheadSlasher.sol:5:8
  |
5 | import "@eth-fabric/urc/ISlasher.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/iface/ILookaheadSlasher.sol:6:8
  |
6 | import "@solady/src/utils/ext/ithaca/BLS.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/iface/ILookaheadSlasher.sol:7:8
  |
7 | import "src/layer1/preconf/iface/ILookaheadStore.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/iface/ILookaheadSlasher.sol:8:8
  |
8 | import "src/layer1/preconf/libs/LibEIP4788.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
   --> contracts/layer1/preconf/libs/LibBLS12381.sol:345:17
    |
345 |         uint256 b_0;
    |                 ^^^ help: consider using: `b0`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/iface/ILookaheadStore.sol:4:8
  |
4 | import "@eth-fabric/urc/ISlasher.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/whitelist/PreconfWhitelist.t.sol:5:8
  |
5 | import "src/layer1/preconf/impl/PreconfWhitelist.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/whitelist/PreconfWhitelist.t.sol:6:8
  |
6 | import "test/shared/CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/genesis/GenerateGenesis.g.sol:4:8
  |
4 | import "../shared/helpers/RegularERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/genesis/GenerateGenesis.g.sol:5:8
  |
5 | import "forge-std/src/StdJson.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/genesis/GenerateGenesis.g.sol:6:8
  |
6 | import "forge-std/src/Test.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/genesis/GenerateGenesis.g.sol:7:8
  |
7 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/genesis/GenerateGenesis.g.sol:8:8
  |
8 | import "src/layer2/core/Anchor.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/genesis/GenerateGenesis.g.sol:9:8
  |
9 | import "src/layer2/core/BondManager.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:10:8
   |
10 | import "src/shared/bridge/Bridge.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:11:8
   |
11 | import "src/shared/common/DefaultResolver.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:12:8
   |
12 | import "src/shared/signal/SignalService.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:13:8
   |
13 | import "src/shared/vault/BridgedERC1155.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
 --> script/layer1/mainnet/DeployTaikoDAOController.s.sol:9:17
  |
9 |         address MainnetDAOControllerImpl2 = address(new MainnetDAOController());
  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `mainnetDaoControllerImpl2`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/governance/BuildProposal.sol:4:8
  |
4 | import "@openzeppelin/contracts/access/Ownable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/governance/BuildProposal.sol:5:8
  |
5 | import "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/governance/BuildProposal.sol:6:8
  |
6 | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/governance/BuildProposal.sol:7:8
  |
7 | import "forge-std/src/Script.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/governance/BuildProposal.sol:9:8
  |
9 | import "src/layer1/mainnet/MainnetDAOController.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:14:8
   |
14 | import "src/shared/vault/BridgedERC20.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:15:8
   |
15 | import "src/shared/vault/BridgedERC721.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:16:8
   |
16 | import "src/shared/vault/ERC1155Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:17:8
   |
17 | import "src/shared/vault/ERC20Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/genesis/GenerateGenesis.g.sol:18:8
   |
18 | import "src/shared/vault/ERC721Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-immutable]: immutables should use SCREAMING_SNAKE_CASE
   --> test/layer1/preconf/whitelist/PreconfWhitelist.t.sol:643:31
    |
643 |     bytes32 private immutable root;
    |                               ^^^^ help: consider using: `ROOT`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-immutable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:23:8
   |
23 | import "src/shared/vault/ERC721Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/genesis/GenerateGenesis.g.sol:23:20
   |
23 |     string private configJSON =
   |                    ^^^^^^^^^^ help: consider using: `configJson`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
  --> test/genesis/GenerateGenesis.g.sol:24:12
   |
24 |         vm.readFile(string.concat(vm.projectRoot(), "/test/genesis/data/genesis_config.json"));
   |            ^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/genesis/GenerateGenesis.g.sol:25:20
   |
25 |     string private genesisAllocJSON =
   |                    ^^^^^^^^^^^^^^^^ help: consider using: `genesisAllocJson`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
  --> test/genesis/GenerateGenesis.g.sol:26:12
   |
26 |         vm.readFile(string.concat(vm.projectRoot(), "/test/genesis/data/genesis_alloc.json"));
   |            ^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/governance/BuildProposal.sol:11:8
   |
11 | import "src/shared/bridge/IBridge.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/BaseTest.sol:4:8
  |
4 | import "forge-std/src/Test.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> test/shared/CommonTest.sol:24:8
   |
24 | import "test/shared/helpers/SignalService_WithoutProofVerification.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC721Vault.h.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC721Vault.h.sol:5:8
  |
5 | import "../helpers/CanSayHelloWorld.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/BaseScript.sol:4:8
  |
4 | import "forge-std/src/Script.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/BaseScript.sol:5:8
  |
5 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/BaseScript.sol:7:8
  |
7 | import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/BaseScript.sol:8:8
  |
8 | import "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/BaseScript.sol:9:8
  |
9 | import "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/BaseScript.sol:10:8
   |
10 | import "@openzeppelin/contracts/utils/Strings.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/BaseScript.sol:11:8
   |
11 | import "@optimism/packages/contracts-bedrock/src/EAS/Common.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/BaseScript.sol:13:8
   |
13 | import "src/shared/common/DefaultResolver.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/genesis/GenerateGenesis.g.sol:151:18
    |
151 |         assertEq(uint64(shastaForkHeight), taikoAnchorProxy.shastaForkHeight());
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint64' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> contracts/layer1/preconf/libs/LibBLSSignature.sol:4:8
  |
4 | import "./LibBLS12381.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/mainnet/DeployDelegateController.s.sol:4:8
  |
4 | import "script/BaseScript.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/mainnet/DeployDelegateController.s.sol:6:8
  |
6 | import "src/layer2/governance/DelegateController.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/mainnet/DeployDelegateController.s.sol:8:8
  |
8 | import "src/shared/common/IResolver.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/mainnet/DeployDelegateController.s.sol:9:8
  |
9 | import "src/shared/libs/LibNames.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer2/mainnet/DeployDelegateController.s.sol:10:8
   |
10 | import "src/shared/libs/LibNetwork.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:28:22
   |
28 |     address internal Alice = vm.addr(0x1);
   |                      ^^^^^ help: consider using: `alice`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:29:22
   |
29 |     address internal Bob = vm.addr(0x2);
   |                      ^^^ help: consider using: `bob`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:30:22
   |
30 |     address internal Carol = vm.addr(0x3);
   |                      ^^^^^ help: consider using: `carol`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:31:22
   |
31 |     address internal David = vm.addr(0x4);
   |                      ^^^^^ help: consider using: `david`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:32:22
   |
32 |     address internal Emma = vm.addr(0x5);
   |                      ^^^^ help: consider using: `emma`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:33:22
   |
33 |     address internal Frank = randAddress();
   |                      ^^^^^ help: consider using: `frank`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:34:22
   |
34 |     address internal Grace = randAddress();
   |                      ^^^^^ help: consider using: `grace`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:35:22
   |
35 |     address internal Henry = randAddress();
   |                      ^^^^^ help: consider using: `henry`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:36:22
   |
36 |     address internal Isabella = randAddress();
   |                      ^^^^^^^^ help: consider using: `isabella`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:37:22
   |
37 |     address internal James = randAddress();
   |                      ^^^^^ help: consider using: `james`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:38:22
   |
38 |     address internal Katherine = randAddress();
   |                      ^^^^^^^^^ help: consider using: `katherine`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:39:22
   |
39 |     address internal Liam = randAddress();
   |                      ^^^^ help: consider using: `liam`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:40:22
   |
40 |     address internal Mia = randAddress();
   |                      ^^^ help: consider using: `mia`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:41:22
   |
41 |     address internal Noah = randAddress();
   |                      ^^^^ help: consider using: `noah`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:42:22
   |
42 |     address internal Olivia = randAddress();
   |                      ^^^^^^ help: consider using: `olivia`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:43:22
   |
43 |     address internal Patrick = randAddress();
   |                      ^^^^^^^ help: consider using: `patrick`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:44:22
   |
44 |     address internal Quinn = randAddress();
   |                      ^^^^^ help: consider using: `quinn`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:45:22
   |
45 |     address internal Rachel = randAddress();
   |                      ^^^^^^ help: consider using: `rachel`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:46:22
   |
46 |     address internal Samuel = randAddress();
   |                      ^^^^^^ help: consider using: `samuel`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:47:22
   |
47 |     address internal Taylor = randAddress();
   |                      ^^^^^^ help: consider using: `taylor`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:48:22
   |
48 |     address internal Ulysses = randAddress();
   |                      ^^^^^^^ help: consider using: `ulysses`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:49:22
   |
49 |     address internal Victoria = randAddress();
   |                      ^^^^^^^^ help: consider using: `victoria`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:50:22
   |
50 |     address internal William = randAddress();
   |                      ^^^^^^^ help: consider using: `william`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:51:22
   |
51 |     address internal Xavier = randAddress();
   |                      ^^^^^^ help: consider using: `xavier`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:52:22
   |
52 |     address internal Yasmine = randAddress();
   |                      ^^^^^^^ help: consider using: `yasmine`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/shared/CommonTest.sol:53:22
   |
53 |     address internal Zachary = randAddress();
   |                      ^^^^^^^ help: consider using: `zachary`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/shared/CommonTest.sol:102:24
    |
102 |         return address(bytes20(randomHash));
    |                        ^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'bytes20' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[mixed-case-function]: function names should use mixedCase
  --> test/shared/vault/ERC721Vault.h.sol:46:14
   |
46 |     function sendReceiveERC721ToERC721Vault(
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `sendReceiveErc721ToErc721Vault`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/shared/SetAddress.s.sol:5:8
  |
5 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/shared/SetAddress.s.sol:7:8
  |
7 | import "src/shared/common/DefaultResolver.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/genesis/GenerateGenesis.g.sol:171:21
    |
171 |                     uint64(shastaForkHeight),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint64' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

warning[unsafe-typecast]: typecasts that can truncate values should be checked
   --> test/genesis/GenerateGenesis.g.sol:172:21
    |
172 |                     uint64(l1ChainId)
    |                     ^^^^^^^^^^^^^^^^^
    |
    = note: consider disabling this lint if you're certain the cast is safe
            
            // casting to 'uint64' is safe because [explain why]
            // forge-lint: disable-next-line(unsafe-typecast)
            
            
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-typecast

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/PostGenesisQuery.s.sol:4:8
  |
4 | import "script/BaseScript.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-const]: constants should use SCREAMING_SNAKE_CASE
 --> script/layer2/PostGenesisQuery.s.sol:9:29
  |
9 |     uint256 public constant ethereumChainId = 1;
  |                             ^^^^^^^^^^^^^^^ help: consider using: `ETHEREUM_CHAIN_ID`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-const

note[screaming-snake-case-const]: constants should use SCREAMING_SNAKE_CASE
  --> script/layer2/PostGenesisQuery.s.sol:10:29
   |
10 |     uint256 public constant taikoChainId = 167_000;
   |                             ^^^^^^^^^^^^ help: consider using: `TAIKO_CHAIN_ID`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-const

note[unsafe-cheatcode]: usage of unsafe cheatcodes that can perform dangerous operations
  --> script/layer1/governance/BuildProposal.sol:65:12
   |
65 |         vm.writeFile(fileName, fileContent);
   |            ^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unsafe-cheatcode

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/core/DeployProtocolOnL1.s.sol:4:8
  |
4 | import "@p256-verifier/contracts/P256Verifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibTrieProof.t.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibTrieProof.t.sol:5:8
  |
5 | import "src/shared/libs/LibTrieProof.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/PostGenesisConfig.s.sol:4:8
  |
4 | import "forge-std/src/Script.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/PostGenesisConfig.s.sol:5:8
  |
5 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/PostGenesisConfig.s.sol:7:8
  |
7 | import "script/BaseScript.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibBytes.t.sol:4:8
  |
4 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibBytes.t.sol:6:8
  |
6 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/PostGenesisConfig.s.sol:8:8
  |
8 | import "src/shared/bridge/Bridge.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer2/PostGenesisConfig.s.sol:9:8
  |
9 | import "src/shared/vault/ERC20Vault.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-function]: function names should use mixedCase
  --> script/layer2/PostGenesisQuery.s.sol:65:14
   |
65 |     function display_general_info() internal view {
   |              ^^^^^^^^^^^^^^^^^^^^ help: consider using: `displayGeneralInfo`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC1155Vault.t.sol:4:8
  |
4 | import "./ERC1155Vault.h.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC20Vault.h.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/vault/ERC20Vault.h.sol:5:8
  |
5 | import "../helpers/CanSayHelloWorld.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> script/layer2/PostGenesisConfig.s.sol:19:20
   |
19 |     address public bridgedTKO = 0xA9d23408b9bA935c230493c40C73824Df71A0975;
   |                    ^^^^^^^^^^ help: consider using: `bridgedTko`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> script/layer2/PostGenesisConfig.s.sol:20:20
   |
20 |     address public bridgedUSDC = 0x07d83526730c7438048D55A4fc0b850e2aaB6f0b;
   |                    ^^^^^^^^^^^ help: consider using: `bridgedUsdc`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-function]: function names should use mixedCase
  --> test/shared/vault/ERC20Vault.h.sol:38:14
   |
38 |     function sendReceiveERC20ToERC20Vault(
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `sendReceiveErc20ToErc20Vault`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/core/DeployProtocolOnL1.s.sol:5:8
  |
5 | import "@risc0/contracts/groth16/RiscZeroGroth16Verifier.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibBytes.t.sol:7:8
  |
7 | import "src/shared/libs/LibBytes.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/shared/SetRemoteBridgeSuites.s.sol:4:8
  |
4 | import "test/shared/DeployCapability.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibAddress.h.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibAddress.h.sol:5:8
  |
5 | import "src/shared/libs/LibAddress.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibNetwork.t.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibNetwork.t.sol:5:8
  |
5 | import "src/shared/libs/LibTrieProof.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
 --> test/layer1/preconf/BaseTest.sol:7:13
  |
7 |     address addr_1 = vm.addr(1);
  |             ^^^^^^ help: consider using: `addr1`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
 --> test/layer1/preconf/BaseTest.sol:8:13
  |
8 |     address addr_2 = vm.addr(2);
  |             ^^^^^^ help: consider using: `addr2`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
 --> test/layer1/preconf/BaseTest.sol:9:13
  |
9 |     address addr_3 = vm.addr(3);
  |             ^^^^^^ help: consider using: `addr3`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/BaseTest.sol:10:13
   |
10 |     address addr_4 = vm.addr(4);
   |             ^^^^^^ help: consider using: `addr4`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/helpers/SignalService_WithoutProofVerification.sol:4:8
  |
4 | import "src/shared/signal/SignalService.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/libs/LibAddress.t.sol:4:8
  |
4 | import "./LibAddress.h.sol";
  |        ^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/common/EssentialContract.t.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/core/DeployProtocolOnL1.s.sol:7:8
  |
7 | import "src/layer1/automata-attestation/AutomataDcapV3Attestation.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/core/DeployProtocolOnL1.s.sol:8:8
  |
8 | import "src/layer1/automata-attestation/lib/PEMCertChainLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/core/DeployProtocolOnL1.s.sol:9:8
  |
9 | import "src/layer1/automata-attestation/utils/SigVerifyLib.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:13:8
   |
13 | import "src/layer1/devnet/DevnetVerifier.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:14:8
   |
14 | import "src/layer1/devnet/OpVerifier.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:15:8
   |
15 | import "src/layer1/mainnet/MainnetBridge.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:16:8
   |
16 | import "src/layer1/mainnet/MainnetERC1155Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:17:8
   |
17 | import "src/layer1/mainnet/MainnetERC20Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/BaseTest.sol:11:13
   |
11 |     address addr_5 = vm.addr(5);
   |             ^^^^^^ help: consider using: `addr5`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/BaseTest.sol:12:13
   |
12 |     address addr_6 = vm.addr(6);
   |             ^^^^^^ help: consider using: `addr6`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/BaseTest.sol:13:13
   |
13 |     address addr_7 = vm.addr(7);
   |             ^^^^^^ help: consider using: `addr7`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/BaseTest.sol:14:13
   |
14 |     address addr_8 = vm.addr(8);
   |             ^^^^^^ help: consider using: `addr8`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/BaseTest.sol:15:13
   |
15 |     address addr_9 = vm.addr(9);
   |             ^^^^^^ help: consider using: `addr9`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/helpers/FreeMintERC20Token.sol:4:8
  |
4 | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/shared/common/DefaultResolver.t.sol:4:8
  |
4 | import "../CommonTest.sol";
  |        ^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[screaming-snake-case-const]: constants should use SCREAMING_SNAKE_CASE
 --> test/shared/common/DefaultResolver.t.sol:9:31
  |
9 |     uint256 internal constant chainId = 123;
  |                               ^^^^^^^ help: consider using: `CHAIN_ID`
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#screaming-snake-case-const

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:18:8
   |
18 | import "src/layer1/mainnet/MainnetERC721Vault.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:19:8
   |
19 | import "src/layer1/mainnet/TaikoToken.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/core/DeployTaikoToken.s.sol:4:8
  |
4 | import "src/layer1/mainnet/TaikoToken.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> script/layer1/core/DeployTaikoToken.s.sol:5:8
  |
5 | import "test/shared/DeployCapability.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:20:8
   |
20 | import "src/layer1/preconf/impl/PreconfWhitelist.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:21:8
   |
21 | import "src/layer1/verifiers/Risc0Verifier.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-variable]: mutable variables should use mixedCase
  --> test/layer1/preconf/BaseTest.sol:16:13
   |
16 |     address addr_10 = vm.addr(10);
   |             ^^^^^^^ help: consider using: `addr10`
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/libs/LibPreconfUtils.t.sol:4:8
  |
4 | import "forge-std/src/Test.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/libs/LibPreconfUtils.t.sol:5:8
  |
5 | import "forge-std/src/console2.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
 --> test/layer1/preconf/libs/LibPreconfUtils.t.sol:6:8
  |
6 | import "src/layer1/preconf/libs/LibPreconfUtils.sol";
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:22:8
   |
22 | import "src/layer1/verifiers/SP1Verifier.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:23:8
   |
23 | import "src/layer1/verifiers/SgxVerifier.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:24:8
   |
24 | import "src/shared/common/DefaultResolver.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:25:8
   |
25 | import "src/shared/libs/LibNames.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:26:8
   |
26 | import "src/shared/signal/SignalService.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:27:8
   |
27 | import "src/shared/vault/BridgedERC1155.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:28:8
   |
28 | import "src/shared/vault/BridgedERC20.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:29:8
   |
29 | import "src/shared/vault/BridgedERC721.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:31:8
   |
31 | import "test/shared/DeployCapability.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:32:8
   |
32 | import "test/shared/helpers/FreeMintERC20Token.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[unaliased-plain-import]: use named imports '{A, B}' or alias 'import ".." as X'
  --> script/layer1/core/DeployProtocolOnL1.s.sol:33:8
   |
33 | import "test/shared/helpers/FreeMintERC20Token_With50PctgMintAndTransferFailure.sol";
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#unaliased-plain-import

note[mixed-case-function]: function names should use mixedCase
   --> script/layer1/core/DeployProtocolOnL1.s.sol:382:14
    |
382 |     function _deployZKVerifiers(
    |              ^^^^^^^^^^^^^^^^^^ help: consider using: `_deployZkVerifiers`
    |
    = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-function

