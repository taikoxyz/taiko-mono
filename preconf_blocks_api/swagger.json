{
    "swagger": "2.0",
    "info": {
        "title": "Taiko Preconfirmation Block Server API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://community.taiko.xyz/",
            "email": "info@taiko.xyz"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/taikoxyz/taiko-mono/blob/main/LICENSE.md"
        },
        "version": "1.0"
    },
    "paths": {
        "/healthz": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get current server health status",
                "operationId": "health-check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/preconfBlocks": {
            "post": {
                "description": "Insert a preconfirmation block to the L2 execution engine, if the preconfirmation block creation\nbody in request are valid, it will insert the corresponding\npreconfirmation block to the backend L2 execution engine and return a success response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Insert a preconfirmation block to the L2 execution engine.",
                "parameters": [
                    {
                        "description": "preconfirmation block creation request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/preconfblocks.BuildPreconfBlockRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/preconfblocks.BuildPreconfBlockResponseBody"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove all preconfirmation blocks from the blockchain beyond the specified block height,\nensuring the latest block ID does not exceed the given height. This method will fail if\nthe block with an ID one greater than the specified height is not a preconfirmation block. If the\nspecified block height is greater than the latest preconfirmation block ID, the method will succeed\nwithout modifying the blockchain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "preconfirmation blocks removing request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/preconfblocks.RemovePreconfBlocksRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/preconfblocks.RemovePreconfBlocksResponseBody"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get current preconfirmation block server status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/preconfblocks.Status"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "big.Int": {
            "type": "object"
        },
        "preconfblocks.BuildPreconfBlockRequestBody": {
            "type": "object",
            "properties": {
                "endOfSequencing": {
                    "type": "boolean"
                },
                "executableData": {
                    "description": "@param ExecutableData engine.ExecutableData the data necessary to execute an EL payload.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/preconfblocks.ExecutableData"
                        }
                    ]
                }
            }
        },
        "preconfblocks.BuildPreconfBlockResponseBody": {
            "type": "object",
            "properties": {
                "blockHeader": {
                    "description": "@param blockHeader types.Header of the preconfirmation block",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Header"
                        }
                    ]
                }
            }
        },
        "preconfblocks.ExecutableData": {
            "type": "object",
            "properties": {
                "baseFeePerGas": {
                    "type": "integer"
                },
                "blockNumber": {
                    "type": "integer"
                },
                "extraData": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "feeRecipient": {
                    "type": "string"
                },
                "gasLimit": {
                    "type": "integer"
                },
                "parentHash": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "transactions": {
                    "description": "Transactions list with RLP encoded at first, then zlib compressed.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "preconfblocks.Lookahead": {
            "type": "object",
            "properties": {
                "currOperator": {
                    "type": "string"
                },
                "currRanges": {
                    "description": "slots allowed for CurrOperator (0..threshold-1)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preconfblocks.SlotRange"
                    }
                },
                "nextOperator": {
                    "type": "string"
                },
                "nextRanges": {
                    "description": "slots allowed for NextOperator (threshold..slotsPerEpoch-1)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preconfblocks.SlotRange"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "preconfblocks.RemovePreconfBlocksRequestBody": {
            "type": "object",
            "properties": {
                "newLastBlockId": {
                    "description": "@param newLastBlockID uint64 New last block ID of the blockchain, it should\n@param not smaller than the canonical chain's highest block ID.",
                    "type": "integer"
                }
            }
        },
        "preconfblocks.RemovePreconfBlocksResponseBody": {
            "type": "object",
            "properties": {
                "headsRemoved": {
                    "description": "@param headsRemoved uint64 Number of preconfirmation heads removed",
                    "type": "integer"
                },
                "lastBlockId": {
                    "description": "@param lastBlockID uint64 Current highest block ID of the blockchain (including preconfirmation blocks)",
                    "type": "integer"
                },
                "lastProposedBlockID": {
                    "description": "@param lastProposedBlockID uint64 Highest block ID of the cnonical chain",
                    "type": "integer"
                }
            }
        },
        "preconfblocks.SlotRange": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer"
                },
                "start": {
                    "type": "integer"
                }
            }
        },
        "preconfblocks.Status": {
            "type": "object",
            "properties": {
                "endOfSequencingBlockHash": {
                    "description": "@param whether the current epoch has received an end of sequencing block marker",
                    "type": "string"
                },
                "highestUnsafeL2PayloadBlockID": {
                    "description": "@param highestUnsafeL2PayloadBlockID uint64 the highest preconfirmation block ID that the server\n@param has received from the P2P network, if its zero, it means the current server has not received\n@param any preconfirmation block from the P2P network yet.",
                    "type": "integer"
                },
                "lookahead": {
                    "description": "@param lookahead Lookahead the current lookahead information.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/preconfblocks.Lookahead"
                        }
                    ]
                },
                "totalCached": {
                    "description": "@param totalCached uint64 the total number of cached payloads after the start of the server.",
                    "type": "integer"
                }
            }
        },
        "types.Header": {
            "type": "object",
            "properties": {
                "baseFeePerGas": {
                    "description": "BaseFee was added by EIP-1559 and is ignored in legacy headers.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/big.Int"
                        }
                    ]
                },
                "blobGasUsed": {
                    "description": "BlobGasUsed was added by EIP-4844 and is ignored in legacy headers.",
                    "type": "integer"
                },
                "difficulty": {
                    "$ref": "#/definitions/big.Int"
                },
                "excessBlobGas": {
                    "description": "ExcessBlobGas was added by EIP-4844 and is ignored in legacy headers.",
                    "type": "integer"
                },
                "extraData": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "gasLimit": {
                    "type": "integer"
                },
                "gasUsed": {
                    "type": "integer"
                },
                "logsBloom": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "miner": {
                    "type": "string"
                },
                "mixHash": {
                    "type": "string"
                },
                "nonce": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "number": {
                    "$ref": "#/definitions/big.Int"
                },
                "parentBeaconBlockRoot": {
                    "description": "ParentBeaconRoot was added by EIP-4788 and is ignored in legacy headers.",
                    "type": "string"
                },
                "parentHash": {
                    "type": "string"
                },
                "receiptsRoot": {
                    "type": "string"
                },
                "requestsHash": {
                    "description": "RequestsHash was added by EIP-7685 and is ignored in legacy headers.",
                    "type": "string"
                },
                "sha3Uncles": {
                    "type": "string"
                },
                "stateRoot": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "transactionsRoot": {
                    "type": "string"
                },
                "withdrawalsRoot": {
                    "description": "WithdrawalsHash was added by EIP-4895 and is ignored in legacy headers.",
                    "type": "string"
                }
            }
        }
    }
}